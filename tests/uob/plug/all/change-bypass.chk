//#uobject test/all

// We test bypass mode by having the notify callbing write on the
// (theoreticaly) const buffer, and having the writter check the
// buffer content. It will thus check if the buffer realy is not
// copied durring the process.
all.markBypass(0, 1)|1;
[00000001] 1

all2.setBypassNotifyChangeImage("all.a")|;
assert
{ 
  all.selfWriteI(0, "aaaaaa") == "bbbbbb";
  all.selfWriteB(0, "aaaaaaa") == "aaaaaaa";

  all.a.isNil;
};

all.markBypass(1, 1)|1;
[00000005] 1
all2.setBypassNotifyChangeBinary("all.b")|;
assert
{
  all.selfWriteI(1, "aaaaa") == "bbbbb";
  all.selfWriteB(1, "aaa")   == "bbb";

  all.b.isNil;
};


// Check urbi interception
var i;
all.&a.notifyChange(closure() { i=all.a})|;
all.selfWriteI(0, "aaaaaa");
[00000009] "bbbbbb"
// Cannot check data content, it will depend on callback order.
i.data.size;
[00000010] 6


// Disable bypass mode, check that nothing segv.
assert
{
  all.markBypass(0, 0) == 1;
  all.selfWriteI(0, "aaaaaa") == "aaaaaa";
  all.selfWriteB(0, "aaaaaaa") == "aaaaaaa";
  all.markBypass(1, 0) == 1;
  all.selfWriteI(1, "aaaaaa") == "aaaaaa";
  all.selfWriteB(1, "aaaaaaa") == "aaaaaaa";
};
