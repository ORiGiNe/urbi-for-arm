#! /bin/sh

test -f /bin/ksh && test -z "$RUNNING_KSH" \
  && { UNAMES=`uname -s`; test "x$UNAMES" = xULTRIX; } 2>/dev/null \
  && { RUNNING_KSH=true; export RUNNING_KSH; exec /bin/ksh $0 ${1+"$@"}; }
unset RUNNING_KSH

# No failure shall remain unpunished.
set -e

me=$(basename "$0")
medir=$(dirname "$0")

# We have to initialize IFS to space tab newline since we save and
# restore IFS and apparently POSIX allows stupid/broken behavior with
# empty-but-set IFS.
# http://lists.gnu.org/archive/html/automake-patches/2006-05/msg00008.html
# We need space, tab and new line, in precisely that order.  And don't
# leave trailing blanks.
space=' '
tab='	'
newline='
'
IFS="$space$tab$newline"

# Pacify verbose cds.
CDPATH=${ZSH_VERSION+.}$path_sep

# In case someone crazy insists on using grep -E.
: ${EGREP=egrep}

debug=false
quiet=false     # by default let the tools' message be displayed
verb=false      # true for verbose mode

## --------------------- ##
## Auxiliary functions.  ##
## --------------------- ##

# In case `local' is not supported by the shell.
(
  foo=bar
  test_local () {
    local foo="foo"
  }
  test_local
  test $foo = bar
) || local () {
  case $1 in
    *=*) eval "$1";;
  esac
}


# stderr LINE1 LINE2...
# ---------------------
# Report some information on stderr.
stderr ()
{
  for i
  do
    echo "$i"
  done | sed -e "s/^/$me: /" >&2
}

# verbose WORD1 WORD2
# -------------------
# Report some verbose information.
verbose ()
{
  if $verb; then
    stderr "$@"
  fi
}

# run COMMAND-LINE
# ----------------
# Run the COMMAND-LINE verbosely, and catching errors as failures.
run ()
{
  if $verb; then
    first=true
    for i
    do
      if $first; then
	stderr "Running: $i"
	first=false
      else
	stderr "       : $i"
      fi
    done
  fi
  "$@" 1>&5 ||
     error 1 "$1 failed"
}


# error EXIT_STATUS LINE1 LINE2...
# --------------------------------
# Report an error and exit with EXIT_STATUS.
error ()
{
  local s="$1"
  # FIXME: use m4sh to factor.
  case ${s#EX_} in
    (OK)          s=0;;
    (USAGE)       s=64;;
    (DATAERR)     s=65;;
    (NOINPUT)     s=66;;
    (NOUSER)      s=67;;
    (NOHOST)      s=68;;
    (UNAVAILABLE) s=69;;
    (SOFTWARE)    s=70;;
    (OSERR)       s=71;;
    (OSFILE)      s=72;;
    (CANTCREAT)   s=73;;
    (IOERR)       s=74;;
    (TEMPFAIL)    s=75;;
    (PROTOCOL)    s=76;;
    (NOPERM)      s=77;;
    (CONFIG)      s=78;;
    (SKIP)        s=176;;
    (HARD)        s=177;;
  esac
  shift
  stderr "$@"
  exit $s
}


# fata LINE1 LINE2...
# -------------------
# Report an error and exit 1.
fatal ()
{
  error 1 "$@"
}


# dirlist_error EXIT_STATUS WHAT WHERE WHICH
# ------------------------------------------
# Report an error and exit with failure if WHICH, of type WHAT
# does not exist in WHERE.
# This function tests only directories
dirlist_error ()
{
  local err="$1"
  local type="$2"
  local base="$3"
  local val="$4"

  if test ! -d $base/$val; then
    stderr "no such $type $val, possible choices are :"
    for d in $base/*; do
      if test -d $d; then
	stderr "  - $(basename $d)"
      fi
    done
    exit $err
  fi
}

# exist_error EXIT_STATUS WHAT WHERE OPTION
# -----------------------------------------
# Report an error and exit with failure if WHERE is not found
# or is not of type WHAT.
# OPTION indicates which umake option to set for this value.
# This function tests only directories
exist_error ()
{
  local err="$1"
  local type="$2"
  local base="$3"
  local option="$4"
  local longtype="$2"

  case $type in
    d) longtype=directory;;
    f) longtype=file;;
  esac

  test "$type" = d -a -n "$base" &&
    base=$(dirname $base/.)

  if test ! -$type "$base"; then
    stderr "no such $longtype $base"
    if test -n "$option"; then
      stderr "  use option --$option to set to an alternative value."
    fi
    exit $err
  fi
}

# Initialize the common set up.  Should be done when $debug and
# $quiet are set.
initialize ()
{
  # File descriptor usage:
  # 0 standard input
  # 1 standard output (--verbose messages)
  # 2 standard error
  # 3 some systems may open it to /dev/tty
  # 4 used on the Kubota Titan
  # 5 tools output (turned off by --quiet)
  # 6 tracing/debugging (set -x output, etc.)

  # Main tools' output (TeX, etc.) that TeX users are used to seeing.
  #
  # If quiet, discard, else redirect to the error flow.
  if $quiet; then
    exec 5>/dev/null
  else
    exec 5>&2
  fi

  # Enable tracing, and auxiliary tools output.
  #
  # Should be used where you'd typically use /dev/null to throw output
  # away.  But sometimes it is convenient to see that output (e.g., from
  # a grep) to aid debugging.  Especially debugging at distance, via the
  # user.
  if $debug || test x"$VERBOSE" = xx; then
    exec 6>&1
    set -x
  else
    exec 6>/dev/null
  fi

  verbose "$0 running."
}

# append VARIABLE CONTENT [SEPARATOR=' ']
# ---------------------------------------
append ()
{
  local var="$1"
  local content="$2"
  local sep
  sep=${3-' '}
  eval "$var=\$$var\${$var:+$sep}\$content"
}

usage ()
{
  cat <<EOF
usage: $me [OPTIONS] MODULE_NAMES ... [-- UOPTIONS...]
Start an UObject in either remote or plugin mode.

Options:
  -h, --help         output this message and exit successfully
      --version      output version information and exit successfully
  -d, --debug=LEVEL  set the debug level [LOG]
                     (NONE, LOG, TRACE, DEBUG, DUMP)
  -C, --check        exit successfully if support for Java is usable;
                     otherwise exit 72

Java:
  -c, --classpath=PATH
        A colon-separated list of directories, JAR archives, and ZIP archives
        to search for class files.

Networking:
  -H, --host=HOST       address to connect to
  -P, --port=PORT       port to connect to
      --port-file=FILE  file containing the port to listen to

MODULE_NAMES is a list of JAR and ZIP archives containings UObjects.
UOPTIONS are passed to urbi::main.

Exit values:
  0  success
  *  other kinds of errors
EOF
  exit 0
}

version ()
{
  cat <<\EOF
umake 2.7.5 (Urbi 2.7.5)
Copyright (C) 2004-2012, Gostai S.A.S.
EOF
  exit 0
}



## ---------------------- ##
## Command line parsing.  ##
## ---------------------- ##

get_options ()
{
  # Push a token among the arguments that will be used to notice when we
  # ended options/arguments parsing.
  # Use "set dummy ...; shift" rather than 'set - ..." because on
  # Solaris set - turns off set -x (but keeps set -e).
  # Use ${1+"$@"} rather than "$@" because Digital Unix and Ultrix 4.3
  # still expand "$@" to a single argument (the empty string) rather
  # than nothing at all.
  arg_sep="$$--$$"
  set dummy ${1+"$@"} "$arg_sep"; shift

  # Parse command line arguments.
  while test x"$1" != x"$arg_sep"
  do
    # Handle --option=value by splitting apart and putting back on argv.
    case $1 in
      (--*=*)
	opt=`echo "$1" | sed -e 's/=.*//'`
	val=`echo "$1" | sed -e 's/[^=]*=//'`
	shift
	set dummy "$opt" "$val" ${1+"$@"}; shift
	;;
    esac

    case $1 in
      (-d | --debug  )
        append urbi_launch_args "--debug"
	debug=true;;
      (-h | --help   ) usage;;
      (-V | --version) version;;

      (-c | --classpath)   shift; classpath="$classpath:$1";;
      (-C | --check) check=true;;
      (-H | --host)
        shift; host=$1
	append urbi_launch_args "--host $host";;
      (-P | --port)
        shift; port=$1
	append urbi_launch_args "--port $port";;
      (--port-file)
        shift; portfile=$1
	append urbi_launch_args "--port-file $portfile";;

      (--) # What remains are not options.
	shift
	append urbi_launch_args "--"
	while test x"$1" != x"$arg_sep"
	do
	  append urbi_launch_args "$1"
	  set dummy ${1+"$@"} "$1"; shift
	  shift
	done
	break
	;;
      (-*)
	error EX_USAGE "unknown or ambiguous option \`$1'." \
	      "Try \`--help' for more information."
	;;
      (*)
        append uob_archives "$1"
        set dummy ${1+"$@"} "$1"; shift;;
     esac
     shift
  done
}

# Whether to check if we can run properly rather than really run.
check=false
prefix=$(cd $(dirname $0)/.. && pwd)
urbi_launch_args=
uob_archives=
main=urbi.UMain
: ${liburbi_jar="$prefix/share/sdk-remote/java/lib/liburbijava.jar"}
: ${libdirname="lib"}
: ${library_path="$prefix/$libdirname"}

get_options "$@"

if $check; then
  test -f "$liburbi_jar" ||
    error EX_OSFILE "cannot find liburbijava.jar: $liburbi_jar" \
       "is Java support compiled?"
else
  classpath="$classpath:$liburbi_jar"
  # Add standart location to uobject path
  export URBI_UOBJECT_PATH="$URBI_UOBJECT_PATH:.:$prefix/share/sdk-remote/java"
  exec java -Djava.library.path="$library_path" \
      -classpath "$classpath"  "$main"          \
      $uob_archives                             \
      -- $urbi_launch_args
fi


# Local variables:
# mode: shell-script
# End:
