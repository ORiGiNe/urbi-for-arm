#! /bin/sh

test -f /bin/ksh && test -z "$RUNNING_KSH" \
  && { UNAMES=`uname -s`; test "x$UNAMES" = xULTRIX; } 2>/dev/null \
  && { RUNNING_KSH=true; export RUNNING_KSH; exec /bin/ksh $0 ${1+"$@"}; }
unset RUNNING_KSH

# No failure shall remain unpunished.
set -e

me=$(basename "$0")
medir=$(dirname "$0")

# We have to initialize IFS to space tab newline since we save and
# restore IFS and apparently POSIX allows stupid/broken behavior with
# empty-but-set IFS.
# http://lists.gnu.org/archive/html/automake-patches/2006-05/msg00008.html
# We need space, tab and new line, in precisely that order.  And don't
# leave trailing blanks.
space=' '
tab='	'
newline='
'
IFS="$space$tab$newline"

# Pacify verbose cds.
CDPATH=${ZSH_VERSION+.}$path_sep

# In case someone crazy insists on using grep -E.
: ${EGREP=egrep}

debug=false
quiet=false     # by default let the tools' message be displayed
verb=false      # true for verbose mode

## --------------------- ##
## Auxiliary functions.  ##
## --------------------- ##

# In case `local' is not supported by the shell.
(
  foo=bar
  test_local () {
    local foo="foo"
  }
  test_local
  test $foo = bar
) || local () {
  case $1 in
    *=*) eval "$1";;
  esac
}


# stderr LINE1 LINE2...
# ---------------------
# Report some information on stderr.
stderr ()
{
  for i
  do
    echo "$i"
  done | sed -e "s/^/$me: /" >&2
}

# verbose WORD1 WORD2
# -------------------
# Report some verbose information.
verbose ()
{
  if $verb; then
    stderr "$@"
  fi
}

# run COMMAND-LINE
# ----------------
# Run the COMMAND-LINE verbosely, and catching errors as failures.
run ()
{
  if $verb; then
    first=true
    for i
    do
      if $first; then
	stderr "Running: $i"
	first=false
      else
	stderr "       : $i"
      fi
    done
  fi
  "$@" 1>&5 ||
     error 1 "$1 failed"
}


# error EXIT_STATUS LINE1 LINE2...
# --------------------------------
# Report an error and exit with EXIT_STATUS.
error ()
{
  local s="$1"
  # FIXME: use m4sh to factor.
  case ${s#EX_} in
    (OK)          s=0;;
    (USAGE)       s=64;;
    (DATAERR)     s=65;;
    (NOINPUT)     s=66;;
    (NOUSER)      s=67;;
    (NOHOST)      s=68;;
    (UNAVAILABLE) s=69;;
    (SOFTWARE)    s=70;;
    (OSERR)       s=71;;
    (OSFILE)      s=72;;
    (CANTCREAT)   s=73;;
    (IOERR)       s=74;;
    (TEMPFAIL)    s=75;;
    (PROTOCOL)    s=76;;
    (NOPERM)      s=77;;
    (CONFIG)      s=78;;
    (SKIP)        s=176;;
    (HARD)        s=177;;
  esac
  shift
  stderr "$@"
  exit $s
}


# fata LINE1 LINE2...
# -------------------
# Report an error and exit 1.
fatal ()
{
  error 1 "$@"
}


# dirlist_error EXIT_STATUS WHAT WHERE WHICH
# ------------------------------------------
# Report an error and exit with failure if WHICH, of type WHAT
# does not exist in WHERE.
# This function tests only directories
dirlist_error ()
{
  local err="$1"
  local type="$2"
  local base="$3"
  local val="$4"

  if test ! -d $base/$val; then
    stderr "no such $type $val, possible choices are :"
    for d in $base/*; do
      if test -d $d; then
	stderr "  - $(basename $d)"
      fi
    done
    exit $err
  fi
}

# exist_error EXIT_STATUS WHAT WHERE OPTION
# -----------------------------------------
# Report an error and exit with failure if WHERE is not found
# or is not of type WHAT.
# OPTION indicates which umake option to set for this value.
# This function tests only directories
exist_error ()
{
  local err="$1"
  local type="$2"
  local base="$3"
  local option="$4"
  local longtype="$2"

  case $type in
    d) longtype=directory;;
    f) longtype=file;;
  esac

  test "$type" = d -a -n "$base" &&
    base=$(dirname $base/.)

  if test ! -$type "$base"; then
    stderr "no such $longtype $base"
    if test -n "$option"; then
      stderr "  use option --$option to set to an alternative value."
    fi
    exit $err
  fi
}

# Initialize the common set up.  Should be done when $debug and
# $quiet are set.
initialize ()
{
  # File descriptor usage:
  # 0 standard input
  # 1 standard output (--verbose messages)
  # 2 standard error
  # 3 some systems may open it to /dev/tty
  # 4 used on the Kubota Titan
  # 5 tools output (turned off by --quiet)
  # 6 tracing/debugging (set -x output, etc.)

  # Main tools' output (TeX, etc.) that TeX users are used to seeing.
  #
  # If quiet, discard, else redirect to the error flow.
  if $quiet; then
    exec 5>/dev/null
  else
    exec 5>&2
  fi

  # Enable tracing, and auxiliary tools output.
  #
  # Should be used where you'd typically use /dev/null to throw output
  # away.  But sometimes it is convenient to see that output (e.g., from
  # a grep) to aid debugging.  Especially debugging at distance, via the
  # user.
  if $debug || test x"$VERBOSE" = xx; then
    exec 6>&1
    set -x
  else
    exec 6>/dev/null
  fi

  verbose "$0 running."
}

# append VARIABLE CONTENT [SEPARATOR=' ']
# ---------------------------------------
append ()
{
  local var="$1"
  local content="$2"
  local sep
  sep=${3-' '}
  eval "$var=\$$var\${$var:+$sep}\$content"
}

usage ()
{
  cat <<EOF
Usage: $me [OPTION]... [FILE]...

General options:
  -D, --debug       turn on shell debugging (set -x)
  -h, --help        output this help and exit successfully
  -q, --quiet       no output unless errors
  -V, --version     output version information and exit successfully
  -v, --verbose     report on what is done

Compilation options:
      --deep-clean           remove all building directories
  -c, --clean                clean building directory before
                             compilation
  -cp, --classpath=classpath A : separated list of directories, JAR
                             archives, and ZIP archives to search for
                             class files
  -m, --manifest=manifest    include manifest information from specified
                             manifest file
  -o, --output=output        output file name

Developper options:
  -p, --prefix=DIR     library file location [$prefix]
  -k, --kernel=DIR     kernel location [$(kernel)]

Exit codes:
   1   some tool failed
   2   invalid command line option
   3   unknown command line argument
   4   unable to find file or directory

FILE may be Java source files, jar archives files, or directory that will be searched for such files.

Report bugs to sdk-remote-bugs@gostai.com.
EOF

  exit 0
}

version ()
{
  cat <<\EOF
umake 2.7.5 (Urbi 2.7.5)
Copyright (C) 2004-2012, Gostai S.A.S.
EOF
  exit 0
}

# Return the location of param_mk
param_mk ()
{
  if test -n "$param_mk"; then
    echo "$param_mk"
  else
    # If we are building a library, there is no core, so use param.mk
    # from the remote core which is always present.
    echo "$brandlibdir/remote/java/param.mk"
  fi
}

# Return the location of the kernel
kernel ()
{
  echo "${kernel+$prefix}"
}


# Clean all build directories.
deep_clean ()
{
  if find . -name "${builddir_pref}*" -a -type d | xargs rm -rf; then
    error 0 "all build directories cleaned."
  else
    fatal "cannot clean build directories."
  fi
}

tool_test ()
{
  local toolname="$1"
  local tool="$2"
  test -e $tool \
      || fatal "Could not find a working '$toolname' tool."
}

## ---------------------- ##
## Command line parsing.  ##
## ---------------------- ##

get_options ()
{
  # Push a token among the arguments that will be used to notice when we
  # ended options/arguments parsing.
  # Use "set dummy ...; shift" rather than 'set - ..." because on
  # Solaris set - turns off set -x (but keeps set -e).
  # Use ${1+"$@"} rather than "$@" because Digital Unix and Ultrix 4.3
  # still expand "$@" to a single argument (the empty string) rather
  # than nothing at all.
  arg_sep="$$--$$"
  set dummy ${1+"$@"} "$arg_sep"; shift

  # Parse command line arguments.
  while test x"$1" != x"$arg_sep"
  do
    # Handle --option=value by splitting apart and putting back on argv.
    case $1 in
      (--*=*)
	opt=`echo "$1" | sed -e 's/=.*//'`
	val=`echo "$1" | sed -e 's/[^=]*=//'`
	shift
	set dummy "$opt" "$val" ${1+"$@"}; shift
	;;
    esac

    case $1 in
      (-D | --debug  ) debug=true;;
      (-v | --verbose) verb=true;;
      (-h | --help   ) usage;;
      (-q | --quiet  ) quiet=true;;
      (-V | --version) version;;

      (     --deep-clean)    deep_clean ;;
      (-c | --clean)         clean=true ;;
      (-o | --output) shift; target=$1;;

      (-p | --prefix)   shift; prefix=$1;;
      (-k | --kernel)   shift; kernel=$1;;
      (-cp | --classpath)   shift; classpath="$classpath:$1";;
      (-m | --manifest)   shift; manifest="$1";;

      (--) # What remains are not options.
	shift
	while test x"$1" != x"$arg_sep"
	do
	  set dummy ${1+"$@"} "$1"; shift
	  shift
	done
	break
	;;
      (-*)
	error EX_USAGE "unknown or ambiguous option \`$1'." \
	      "Try \`--help' for more information."
	;;
      (*) set dummy ${1+"$@"} "$1"; shift;;
     esac
     shift
  done
  # Pop the token
  shift

  # Interpret remaining command line args as filenames.
  case $#:$oname in
   ([01]:* | *:);;
   (*) error 2 "Can't use option \`--output' with more than one argument.";;
  esac

  while test x"$1" != x || test $havearg = false
  do
    if test x"$1" = x && test $havearg = false; then
      set dummy . ${1+"$@"}; shift
      havearg=true
    fi

    # If this is a directory, append a slash.
    case $1$(test -d "$1" && echo '/') in
      (VPATH=*) vpath=$vpath:$(echo "$1" | sed -e 's/^[^=]*=//');;
      (*=*)     append makeargs "'$1'";;

      (*.java)    append sources "'$1'";  havearg=true ;;
      (*.jar)         append jars "'$1'";     havearg=true ;;
      (*/)
	# It is a directory.
	files=$(find "$1"				\
	    -iname '*.java'				\
	    -or -iname '*.jar' | grep -Fv "$builddir_pref" ) || true
	havearg=true;
	shift
	set dummy $files ${1+"$@"};;
      (*)
        error 3 "unknown type of file '$1'"
	;;
    esac
    shift
  done
}


## ------ ##
## Main.  ##
## ------ ##

: ${javac="javac"}
: ${jar="jar"}
tool_test "javac" "$javac"
tool_test "jar" "$jar"

clean=false
havearg=false   # we have at least one path or file arg

builddir=
builddir_pref="classes"

# Make the package relocatable: the urbi-root contains the bin
# directory that contains this tool.  Yet, make it absolute.  For
# instance because libtool does not want relative rpath, and prefix
# contributes to libdir.
prefix=$(cd $(dirname $0)/.. && pwd)

# Keep the variables in that order, they have dependencies.  bindir is
# needed at least on Windows, where libdir is defined as $bindir.
: ${PACKAGE_BRAND="gostai"}
: ${exec_prefix="${prefix}"}
: ${bindir="${exec_prefix}/bin"}
: ${libdir="${exec_prefix}/lib"}
: ${brandlibdir="${libdir}/${PACKAGE_BRAND}"}

: ${liburbi_jar="$prefix/share/sdk-remote/java/lib/liburbijava.jar"}
: ${classpath=".:$liburbi_jar"}

# Target name.
target="uobject"
sources=
makeargs=
manifest=
objects=

get_options "$@"
initialize


for s in $(eval echo "$sources")
do
  append objects "'"$(echo "$s" | sed 's/\.[^.]*$/.class/g')"'"
done

libext=".jar"

target=${target%$libext}$libext

append makeargs "OUTJAR=$target"

# Then pass env.
append makeargs "prefix=$prefix"

# Set and create build dir for temporary files
builddir="$(dirname $target)/${builddir_pref}-$(basename $target)"
# Clean target build directory
if $clean; then
  if rm -rf "$builddir"; then
    stderr "build directory cleaned."
  else
    fatal "cannot remove $builddir"
  fi
fi

# Create target build directory
mkdir -p "$builddir"

# Generate object fullnames
obj_fullnames=
jar_objects=
for o in $objects; do
  obj_fullnames="$obj_fullnames '"${builddir}/$(echo "$o" | tr -d "'")"'"
  jar_objects="$jar_objects -C ${builddir} '"$(echo "$o" | tr -d "'")"'"
done
objects=$obj_fullnames

# Check if base directory exists
exist_error 4 d "$prefix" prefix

# Check param.mk file
exist_error 4 f $(param_mk) param-mk

# Invoke make.
if $verb; then
  echo >&2 "$(param_mk):"
  sed  >&2 's/^/> /' $(param_mk)
fi

jarflags="cf"
if test "x$manifest" != x; then
    jarflags="${jarflags}m"
fi

verbose "invoking make -f $(param_mk) $target"
run eval make -f "$(param_mk)"			\
    "$target"					\
    UMAKE_BUILD_DIR="$builddir"			\
    JOBJECTS="'$objects'"			\
    JSOURCES="'$sources'"			\
    JAROBJECTS="'$jar_objects'"			\
    CLASSPATH="'$classpath'"			\
    MANIFEST="$manifest"			\
    JAVAC="$javac"				\
    JAR="$jar"					\
    JARFLAGS="$jarflags"			\
    "$makeargs"

verbose "done."

exit 0

# Local variables:
# mode: shell-script
# End:
