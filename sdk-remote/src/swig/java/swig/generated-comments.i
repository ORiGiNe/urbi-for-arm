%javamethodmodifiers urbi::data
"    /** @return a reference to the data structure from an UVar.
     * The UVar must be a CustomUVar<T>, or the behavior will be undefined.
     */
 public ";
%javamethodmodifiers urbi::package_info
"  /// Package information about liburbi and UObjects.
 public ";
%typemap(javaimports) urbi::UObjectSocket
"  /** Use this class instead of libport::Socket when you need an UObject which
   * is also a Socket.
   */
"

%typemap(javaimports) urbi::UCallbackInfo
"  //used internaly
"

%typemap(javaimports) urbi::UClientStreambuf
"  //used internaly
"

%typemap(javaimports) urbi::UAbstractClient
"  /// Interface for an URBI wrapper object.
  /*! Implementations of this interface are wrappers around the URBI protocol.
    It handles URBI messages parsing, callback registration and various
    formatting functions.
    Implementations of this interface should:
    - Redefine errorNotify() as a function able to notify the user of eventual
    errors.
    - Redfine the four mutual exclusion functions.
    - Redefine effectiveSend().
    - Fill recvBuffer, update recvBufferPosition and call processRecvBuffer()
    when new data is available.
    - Provide an execute() function in the namespace urbi, that never returns,
    and that will be called after initialization.
    - Call onConnection when the connection is established.

   See the liburbi-cpp documentation for more informations on
   how to use this class.
  */
"

%javamethodmodifiers urbi::UAbstractClient::default_host
"    /// Default host.
 public ";
%javamethodmodifiers urbi::UAbstractClient::error
"    /// Return current error status, or zero if no error occurred.
 public ";
%javamethodmodifiers urbi::UAbstractClient::send
"    /// Send the value without any prefix or terminator
 public ";
%javamethodmodifiers urbi::UAbstractClient::send
"    /// Send the remainder of the stream.
 public ";
%javamethodmodifiers urbi::UAbstractClient::sendBin
"    /// Send binary data.
 public ";
%javamethodmodifiers urbi::UAbstractClient::startPack
"    /// Lock the send buffer (for backward compatibility, will be
    /// removed in future versions).
 public ";
%javamethodmodifiers urbi::UAbstractClient::endPack
"    /// Unlock the send buffer (for backward compatibility, will be
    /// removed in future versions).
 public ";
%javamethodmodifiers urbi::UAbstractClient::vpack
"    /// va_list version of pack.
    /// Passing `0' is supported as means `\"\"', but with no warning.
 public ";
%javamethodmodifiers urbi::UAbstractClient::sendFile
"    /// Send urbi commands contained in a file.
    /// The file \"/dev/stdin\" is recognized as referring to std::cin.
 public ";
%javamethodmodifiers urbi::UAbstractClient::putFile
"    /// Put a file on the robot's mass storage device.
 public ";
%javamethodmodifiers urbi::UAbstractClient::setCallback
"    //@}
    //@{
    /**
    * \\defgroup Setting read callbacks.
    *
    * All those functions register function callbacks that are called on
    * some events. The UClient subclass calls those callbacks synchronously
    * in the main read thread, so no other callback will be called until
    * the first one returns.
    * The USyncClient subclass uses a separate thread per instance.
    */
    /// Associate a callback function with a tag. New style.
    /*!
    \\param callback a callback function wrapper, generated by callback()
    \\param tag the tag to associate the callback with
    */
 public ";
%javamethodmodifiers urbi::UAbstractClient::setErrorCallback
"    /// Associate a callback function with all error messages from the server
 public ";
%javamethodmodifiers urbi::UAbstractClient::setWildcardCallback
"    /// Associate a callback with all messages
 public ";
%javamethodmodifiers urbi::UAbstractClient::setClientErrorCallback
"    /// Associate a callback with local connection errors
 public ";
%javamethodmodifiers urbi::UAbstractClient::setCallback
"    /// OLD-style callbacks
 public ";
%javamethodmodifiers urbi::UAbstractClient::getAssociatedTag
"    //@}
    /// Get the tag associated with a registered callback.
    /// \\return 1 and fill tag on success, 0 on failure.
 public ";
%javamethodmodifiers urbi::UAbstractClient::deleteCallback
"    /// Delete a callback.
    /// \\return 0 if no callback with this id was found, 1 otherwise.
 public ";
%javamethodmodifiers urbi::UAbstractClient::fresh
"    /// Return a identifier, for tags for instance.
 public ";
%javamethodmodifiers urbi::UAbstractClient::notifyCallbacks
"    /// Pass the given UMessage to all registered callbacks with the
    /// corresponding tag, as if it were comming from the URBI server.
 public ";
%javamethodmodifiers urbi::UAbstractClient::getCurrentTime
"    /// Get time in milliseconds since an unspecified but constant
    /// reference time.
 public ";
%javamethodmodifiers urbi::UAbstractClient::getServerName
"    /// Return the server name or IP address.
 public ";
%javamethodmodifiers urbi::UAbstractClient::getServerPort
"    /// Return the server port.
 public ";
%javamethodmodifiers urbi::UAbstractClient::processRecvBuffer
"    /// Called each time new data is available in recvBuffer.
 public ";
%javamethodmodifiers urbi::UAbstractClient::process_recv_buffer_binary_
"    /// New binary data is available.
    /// \\return true if there is still data to process.
 public ";
%javamethodmodifiers urbi::UAbstractClient::process_recv_buffer_text_
"    /// New text data is available.
    /// \\return true if there is still data to process.
 public ";
%javamethodmodifiers urbi::UAbstractClient::stream_get
"    /// This, as a stream.
 public ";
%javamethodmodifiers urbi::UAbstractClient::onConnection
"    /// Must be called by subclasses when the connection is established.
 public ";
%javamethodmodifiers urbi::UAbstractClient::onClose
"    /// Executed when closing connection.
 public ";
%javamethodmodifiers urbi::UAbstractClient::effectiveSend
"    /// Queue data for sending, returns zero on success, nonzero on failure.
 public ";
%javamethodmodifiers urbi::UAbstractClient::effective_send
"    /// Bounce to effectiveSend() using strlen.
 public ";
%javamethodmodifiers urbi::UAbstractClient::effective_send
"    /// Bounce to effectiveSend() using c_str().
 public ";
%javamethodmodifiers urbi::UAbstractClient::addCallback
"    /// Add a callback to the list.
 public ";
%javamethodmodifiers urbi::UAbstractClient::clientError
"    /// Generate a client error message and notify callbacks.
    /// \\param msg     an optional string describing the error.
    ///                The possible prefix \"!!! \" is skipped if present.
    /// \\param code    an optional system error code on which strerror is called
 public ";
%javamethodmodifiers urbi::UAbstractClient::kernelVersion
"    /// Kernel version string.
    /// Call waitForKernelVersion to make sure it is defined (beware
    /// that there are two signatures, one for UAbstractClient,
    /// another for USyncClient).
 public ";
%javamethodmodifiers urbi::UAbstractClient::kernelMajor
"    /// Major kernel version.  Dies if unknown yet.
 public ";
%javamethodmodifiers urbi::UAbstractClient::kernelMinor
"    /// Minor kernel version.  Dies if unknown yet.
 public ";
%javamethodmodifiers urbi::UAbstractClient::waitForKernelVersion
"    /** Block until kernel version is available or an error occurrs.
     * Message processing must not depend on this thread.
     */
 public ";
%javamethodmodifiers urbi::UAbstractClient::setVersion
"    /// A callback, installed by onConnection(), that reads an answer
    /// from the server to know if it's k1 or k2.
 public ";
%javamethodmodifiers urbi::UAbstractClient::setConnectionID
"    /// A callback, installed by setVersion, that computes
    /// connectionID_.
 public ";
%javamethodmodifiers urbi::UAbstractClient::bins_clear
"    /// Empty bins.
 public ";
%typemap(javaimports) urbi::UCallbackWrapper
"  /// Wrapper around a callback function. Use callback() to create them.
"

%typemap(javaimports) urbi::UCallbackWrapperF
"  ///@{
  /// \internal
"

%typemap(javaimports) urbi::BinaryData
"  /*--------------.
  | UBinaryData.  |
  `--------------*/
  // Internal use: unparsed binary data.
"

%javamethodmodifiers urbi::BinaryData::clear
"    /// Reclaim data.
 public ";
%typemap(javaimports) urbi::UBinary
"  /// Binary data of known or unknown type.
  ///
  /// Handles its memory: the data field will be freed when the
  /// destructor is called.
"

%javamethodmodifiers urbi::UBinary::UBinary
"    /// Deep copy constructor.
 public ";
%javamethodmodifiers urbi::UBinary::operator= (const UBinary &b)
"    /// Deep copy.
 public ";
%javamethodmodifiers urbi::UBinary::buildMessage
"    /// Store the result of getMessage() in member \\a message.
 public ";
%javamethodmodifiers urbi::UBinary::getMessage
"    /// Get header.
 public ";
%javamethodmodifiers urbi::UBinary::clear
"    /// Clear all the buffers that were allocated by the system.
 public ";
%javamethodmodifiers urbi::UBinary::~UBinary
"    /// Frees binary buffer.
 public ";
%javamethodmodifiers urbi::UBinary::print
"    /// Used by UValue::print for serialization.
 public ";
%typemap(javaimports) urbi::UClient
"  ///Linux implementation of UAbstractClient.
  /*! This implementation uses a shared thread between all the instances to
   * handle Socket operations, and call the registered callbacks in that thread.
  */
"

%javamethodmodifiers urbi::UClient::options
"      /// Backward compatibility with the previous UClient::UClient
      /// interface.  Don't make it \"explicit\" so that we can call
      /// \"UClient(host, port)\" and have the expected \"server ==
      /// false\".
      ///
      /// start defaults to true, for backward compatibility too.
 public ";
%javamethodmodifiers urbi::UClient::UCLIENT_OPTION
"      /// Whether in server mode.
 public ";
%javamethodmodifiers urbi::UClient::UCLIENT_OPTION
"      /// Whether the socket autostarts.
 public ";
%javamethodmodifiers urbi::UClient::UCLIENT_OPTION
"      /// Wheteher the connection is established asynchronously.
 public ";
%javamethodmodifiers urbi::UClient::start
"    /// Bounce to listen or connect, depending whether server mode.
 public ";
%javamethodmodifiers urbi::UClient::pongTimeout
"    /// Send timeout error.
 public ";
%javamethodmodifiers urbi::UClient::connect_
"    /// Wrapper around Socket::connect.
    /// Client mode.
 public ";
%javamethodmodifiers urbi::UClient::listen_
"    /// Wrapper around Socket::listen.
    /// Server mode.
 public ";
%javamethodmodifiers urbi::UClient::resetAsyncCalls_
"    /// Reset all asynchronous calls.
 public ";
%javamethodmodifiers urbi::listModules
"    /// Return the list of modules that can be bound() into a UContext.
 public ";
%javamethodmodifiers urbi::getPluginContext
"    /// Return the plugin context. Implemented in plugin library only.
 public ";
%typemap(javaimports) urbi::UAutoValue
"  /// UValue with implicit constructors.
"

%typemap(javaimports) urbi::UContext
"  /** Methods available in both UObject and UVar
   *  Wrapper around UContextImpl to enable access through inheritance.
   */
"

%javamethodmodifiers urbi::UContext::uobject_unarmorAndSend
"    /// Send Urbi code (ghost connection in plugin mode, default
    /// connection in remote mode).
 public ";
%javamethodmodifiers urbi::UContext::send
"    /// Send the string to the connection hosting the UObject.
 public ";
%javamethodmodifiers urbi::UContext::send
"    /// Send buf to the connection hosting the UObject.
 public ";
%javamethodmodifiers urbi::UContext::getRunningMode
"    /// Return the mode in which the code is running.
 public ";
%javamethodmodifiers urbi::UContext::isPluginMode
"    /// Return true if the code is running in plugin mode.
 public ";
%javamethodmodifiers urbi::UContext::isRemoteMode
"    /// Return true if the code is running in remote mode.
 public ";
%javamethodmodifiers urbi::UContext::yield
"    /// Yield execution until next cycle.
    /// Process pending messages in remote mode.
 public ";
%javamethodmodifiers urbi::UContext::yield_until
"    /// Yield execution until \\b deadline is met (see libport::utime()).
 public ";
%javamethodmodifiers urbi::UContext::yield_for
"    /// Yield execution for \\b delay.
 public ";
%javamethodmodifiers urbi::UContext::yield_until_things_changed
"    /** Yield execution until something else is scheduled, or until a message is
     * received in remote mode.
     */
 public ";
%javamethodmodifiers urbi::UContext::side_effect_free_set
"    /** If \\b s is true, mark the current task as having no side effect.
     * This call has no effect in remote mode.
     */
 public ";
%javamethodmodifiers urbi::UContext::side_effect_free_get
"    /// Get the current side_effect_free state.
 public ";
%javamethodmodifiers urbi::UContext::kernelVersion
"    /// Get the version of the kernel that will receive send() messages.
 public ";
%javamethodmodifiers urbi::UContext::getCurrentContext
"  /// Will be used if no context is explicitly passed.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::init
"      /// Inject all loaded uobjects in the system by calling newUObjectClass.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::bind
"      /// Inject a specific uobject
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::newUObjectClass
"      /// Called to instanciate the first Object of class.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::getUObjectHub
"      /// Retrieve a UObjectHub based on its name or return 0 if not found.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::getUObject
"      /// Retrieve a UObject based on its name or return 0 if not found.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::uobject_unarmorAndSend
"      /// Send Urbi code (ghost connection in plugin mode, default
      /// connection in remote mode).
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::send
"      /// Send the string to the connection hosting the UObject.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::send
"      /// Send buf to the connection hosting the UObject.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::getRunningMode
"      /// Return the mode in which the code is running.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::kernelVersion
"      /// Get the kernel major,minor version
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::yield
"      /// Yield execution until next cycle.
      /// Process pending messages in remote mode.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::yield_until
"      /// Yield execution until \\b deadline is met (see libport::utime()).
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::yield_for
"      /// Yield execution for \\b delay.
      /// Bounces to yield_until.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::yield_until_things_changed
"      /** Yield execution until something else is scheduled,
       *  or until a message is received in remote mode.
       */
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::side_effect_free_set
"      /** If \\b s is true, mark the current task as having no side effect.
       * This call has no effect in remote mode.
       */
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::side_effect_free_get
"      /// Get the current side_effect_free state.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::registerObject
"      /// Default implementations appends to 'objects'.
 public ";
%javamethodmodifiers urbi::impl::UContextImpl::instanciated
"      /// Called by the urbiStarter after each UObject instanciation.
 public ";
%typemap(javaimports) urbi::CleanupStack
"      /** Cleanup Stack RAII. Useful to delete temporaries created by
       * UValue casters.
       * The UObject API instanciates one for each call to a bound function or
       * notify.
       */
"

%javamethodmodifiers urbi::CleanupStack::pushCleanupStack
"      /// Push a new cleanup stack.
 public ";
%javamethodmodifiers urbi::CleanupStack::popCleanupStack
"     /// Delete all pointers passed to addCleanup in current stack and pop.
 public ";
%javamethodmodifiers urbi::CleanupStack::lock
"      /** Request a context lock from another thread to perform multiple
       * operations.
       */
 public ";
%javamethodmodifiers urbi::CleanupStack::unlock
"      /// Release lock acquired with lock()
 public ";
%javamethodmodifiers urbi::CleanupStack::getIoService
"      /// Get the io_service used by this context
 public ";
%javamethodmodifiers urbi::impl::UObjectImpl::initialize
"      // Called by uobject constructor
 public ";
%javamethodmodifiers urbi::impl::UVarImpl::set
"      // Set the UVar value from v. Must deep-copy unless bypass mode is enabled
 public ";
%javamethodmodifiers urbi::convert
"  // Sound format conversion.
 public ";
%javamethodmodifiers urbi::convert
"  // Image format conversion. JPEG compression not implemented.
 public ";
%typemap(javaimports) urbi::UEvent
"  /** UEvent class definition

     Each UEvent instance corresponds to one URBI event. The class
     provides access to the event properties, and emitting/receiving
     events with payload.  */
"

%javamethodmodifiers urbi::UEvent::UEvent
"    /// Creates an unbound UEvent. Call init() to bind it.
 public ";
%javamethodmodifiers urbi::parse_image_format
"  // Parse an image format string.
 public ";
%javamethodmodifiers urbi::format_string
"  // Conversion to string.
 public ";
%typemap(javaimports) urbi::UImage
"  /*---------.
  | UImage.  |
  `---------*/
  /** Class encapsulating an image.

   This class does not handle its memory: the data field msut be
   freed manualy.  */
"

%javamethodmodifiers urbi::UImage::make
"    /// Return an empty UImage.
    /// Not a constructor so that we can still put it in a union.
 public ";
%javamethodmodifiers urbi::UImage::format_string
"    /// Return a legible definition of imageFormat.
 public ";
%javamethodmodifiers urbi::UImage::headers_
"    // The UBinary headers.
 public ";
%typemap(javaimports) urbi::UMessage
"  /// Class containing all informations related to an URBI message.
"

%javamethodmodifiers urbi::UMessage::~UMessage
"    /// Free everything if data was copied, doesn't free anything otherwise
 public ";
%javamethodmodifiers urbi::UMessage::operator urbi::UValue&()
"    /// Return the message.
 public ";
%javamethodmodifiers urbi::UMessage::print
"    /// Format as \"[TIMESTAMP:TAG] CONTENTS\".
 public ";
%javamethodmodifiers urbi::setThreadLimit
"  /// Set maximum number of threads to use for threaded calls (0=unlimited).
 public ";
%javamethodmodifiers urbi::getFilteredHostname
"  /// Return current hostname mangled to fit into an urbiscript variable name.
 public ";
%typemap(javaimports) urbi::UObject
"  /** Main UObject class definition
      Each UObject instance corresponds to an URBI object.
      It provides mechanisms to bind variables and functions between
      C++ and Urbi.
  */
"

%javamethodmodifiers urbi::UObject::UObject
"    /// Reserved for internal use
 public ";
%javamethodmodifiers urbi::UObject::UNotifyChange
"    // Doxygen does not handle macros very well so feed it simplified code.
    /** @defgroup notifies Change/Access callback registration.
     *
     * All the registered callback functions can take no argument, a
     * reference to an UVar, or any type convertible from UValue. The last
     * kind will be called with the current value contained in the UVar.
     *  @{
     */
    /*!
    \\brief Call a function each time a variable is modified.
    \\param v the variable to monitor.
    \\param fun the function to call each time the variable \\b v is modified.
    The function is called rigth after the variable v is modified.
    */
 public ";
%javamethodmodifiers urbi::UObject::UNotifyThreadedChange
"    /*!
    \\brief Similar to UNotifyChange(), but run function in a thread.
    \\param v the variable to monitor.
    \\param fun the function to call.
    \\param the locking mode to use.
    */
 public ";
%javamethodmodifiers urbi::UObject::UNotifyAccess
"    /*!
    \\brief Call a function each time a variable is accessed.
    \\param v the variable to monitor.
    \\param fun the function to call each time the variable \\b v is accessed.
    The function is called right \\b before the variable \\b v is accessed, giving
    \\b fun the opportunity to modify it.
    */
 public ";
%javamethodmodifiers urbi::UObject::MakeMetaNotify
"    /// \\internal
 public ";
%javamethodmodifiers urbi::UObject::MakeMetaNotify
"    /// \\internal
 public ";
%javamethodmodifiers urbi::UObject::MKUSetTimer
"    MKUSetTimer (/**/, /**/);
 public ";
%javamethodmodifiers urbi::UObject::MKUSetTimer
"    MKUSetTimer (/**/, /**/);
    MKUSetTimer (const, /**/);
 public ";
%javamethodmodifiers urbi::UObject::removeTimer
"    /// Remove a timer registered with USetTimer.
 public ";
%javamethodmodifiers urbi::UObject::USync
"    /// Request permanent synchronization for v.
 public ";
%javamethodmodifiers urbi::UObject::USetUpdate
"    /// Set a timer that will call the update function every 'period'
    /// milliseconds.
 public ";
%javamethodmodifiers urbi::UObject::voidfun
"    /// \\}
    /// Void function used in USync callbacks.
 public ";
%javamethodmodifiers urbi::UObject::clean
"    /// Remove all bindings, this method is called by the destructor.
 public ";
%javamethodmodifiers urbi::UObject::getClassTaskLock
"    // Override me to have your own LOCK_CLASS task lock.
 public ";
%typemap(javaimports) urbi::UObjectHub
"  //! Main UObjectHub class definition
"

%javamethodmodifiers urbi::UObjectHub::USetUpdate
"    /// Set a timer that will call update() every 'period' milliseconds.
 public ";
%javamethodmodifiers urbi::UObjectHub::getAllSubClass
"    //   UObjectList* getAllSubClass(const std::string&); //TODO
 public ";
%javamethodmodifiers urbi::UObjectHub::get_name
"    //   UObjectList* getAllSubClass(const std::string&); //TODO
 public ";
%javamethodmodifiers urbi::UObjectHub::updateGlobal
"    /// This function calls update and the subclass update.
 public ";
%typemap(javaimports) urbi::UProp
"  //! Provides easy access to variable properties
"

%javamethodmodifiers urbi::UProp::UProp
"    // Disable copy ctor and assignment operator.
 public ";
%javamethodmodifiers urbi::UrbiRoot
"  /// Load an Urbi SDK.
  /// \\param program The command used to invoke urbi-launch or urbi.
  /// \\param static_build true if this is a static build:do not dlopen anything
 public ";
%javamethodmodifiers urbi::root
"  /// Root of the Urbi installation.
 public ";
%javamethodmodifiers urbi::core_path
"  /// Plugin and remote libuobjects parent directory.
 public ";
%javamethodmodifiers urbi::share_path
"  /// Share location. Contains Urbi scripts in the urbi/ subdirectory.
 public ";
%javamethodmodifiers urbi::uobjects_path
"  /// Standard uobjects directories.
 public ";
%javamethodmodifiers urbi::library_load
"  /// Load the library \"${libdir}/${base}${ext}\", unless the envvar
  /// named \"URBI_ROOT_LIB${BASE}\" points to another location.
 public ";
%javamethodmodifiers urbi::parse_sound_format
"  /// Parse a sound format string.
 public ";
%javamethodmodifiers urbi::format_string
"  /// Conversion to string.
 public ";
%typemap(javaimports) urbi::USound
"  /*---------.
  | USound.  |
  `---------*/
  /** Class encapsulating sound information.

   This class does not handle its memory: the data field must be
   freed manualy.  */
"

%javamethodmodifiers urbi::USound::make
"    /// Return an empty instance.
    /// Not a constructor so that we can still put it in a union.
 public ";
%javamethodmodifiers urbi::USound::format_string
"    /// Return a legible definition of imageFormat.
 public ";
%javamethodmodifiers urbi::USound::dump
"    // For debugging.
 public ";
%javamethodmodifiers urbi::USound::headers_
"    // The UBinary headers.
 public ";
%javamethodmodifiers urbi::USound::operator<< (std::ostream& o, const USound& s)
"  // Bounce to USound::dump.
 public ";
%typemap(javaimports) urbi::baseURBIStarter
"  /*-----------.
  | UStarter.  |
  `-----------*/
  /*** UObject factory class.
  */
"

%javamethodmodifiers urbi::baseURBIStarter::getFullName
"    /// Return the full name to pass to the UObject constructor.
 public ";
%typemap(javaimports) urbi::objects
"  /*--------------.
  | UStarterHub.  |
  `--------------*/
  /// URBIStarter base class used to store heterogeneous template
  /// class objects in starterlist
"

%typemap(javaimports) urbi::baseURBIStarterHub
"  /*--------------.
  | UStarterHub.  |
  `--------------*/
  /// URBIStarter base class used to store heterogeneous template
  /// class objects in starterlist
"

%typemap(javaimports) urbi::USyncClient
"  /// UClient linux implementation with support for synchronous extra
  /// functions.
  /*! This class provides extra functions to synchronously request
     values. These functions can safely be called frow within a
     callback function.

     All callbacks will be called in a separate thread created in the
     constructor.
     When one of those callbacks calls a synchronous function, new incoming
     messages are kept on hold until the response from the synchronous call
     is received.

     If you want to call these callbacks in a different
     thread, call stopCallbackThread(), then regularly call
     processEvents(). Each call will call callbacks for all pending
     messages in the current thread.  */
"

%javamethodmodifiers urbi::USyncClient::UCLIENT_OPTION
"      /// If true, create a thread dedicated to the processing of
      /// incoming messages. If false, it is the responsibility of the
      /// user to regularly call processEvents().  Defaults to true.
 public ";
%javamethodmodifiers urbi::USyncClient::UCLIENT_OPTION
"      /// Ignore host and port if set, do not connect or listen.
      /// Called when connection is established.
 public ";
%javamethodmodifiers urbi::USyncClient::syncGet
"    /// Synchronously evaluate an Urbi expression. The expression must
    /// not start with a tag or channel.
 public ";
%javamethodmodifiers urbi::USyncClient::syncSend
"    /// Send given buffer without copying it.
 public ";
%javamethodmodifiers urbi::USyncClient::waitForTag
"    /// Wait until a message with specified tag is received. Returned
    /// message must be deleted.
 public ";
%javamethodmodifiers urbi::USyncClient::notifyCallbacks
"    /// Overriding UAbstractclient implementation
 public ";
%javamethodmodifiers urbi::USyncClient::processEvents
"    /**
     * Check message queue for pending messages, notify callbacks synchronously.
     * @param timeout If different -1 process events for at most @a timeout
     *                microseconds. This is useful if you don't want
     *                processEvents() to take to much time if there are many
     *                many pending messages.
     * @return true if at least one message was processed, false otherwise.
     * Callbacks functions are called synchronously in the caller thread.
     */
 public ";
%javamethodmodifiers urbi::USyncClient::stopCallbackThread
"    /**
     *  Stop the callback processing thread.
     *  The user is responsible for calling processEvents() regularily
     *  once this function has been called.
     */
 public ";
%javamethodmodifiers urbi::USyncClient::isCallbackThread
"    /// @return true if the current thread is the callback thread.
 public ";

%javamethodmodifiers urbi::UTable
"    /// Contructor.
 public ";
%javamethodmodifiers urbi::find0
"    /// Return the list of callbacks, otherwise 0.
 public ";
%javamethodmodifiers urbi::clean
"    /// Clean a callback UTable from all callbacks linked to the
    /// object whose name is \\a name.
 public ";
%javamethodmodifiers urbi::find0
"    /// Return the list of callbacks, otherwise 0.
 public ";
%typemap(javaimports) urbi::UTimerCallback
"  //! Timer mechanism
  /*! This class stores a callback as a class method.
   */
"

%typemap(javaimports) urbi::UList
"  /*--------.
  | UList.  |
  `--------*/
  /// Class storing URBI List type
"

%typemap(javaimports) urbi::UNamedValue
"  /*--------------.
  | UNamedValue.  |
  `--------------*/
"

%javamethodmodifiers urbi::UNamedValue::error
"    // Used on errors.
 public ";

%typemap(javaimports) urbi::UValue
"  /*---------.
  | UValue.  |
  `---------*/
  /** Container for a value that handles all types known to URBI.
   */
"

%javamethodmodifiers urbi::UValue::set
"    /// Setter. If copy is false, binary data if present is not copied.
    /// This is dangerous, as the user must ensure that the source UValue
    /// lives longer than this one.
 public ";
%javamethodmodifiers urbi::UValue::clear
"    /// Delete content and reset type to void.
 public ";
%javamethodmodifiers urbi::UValue::error
"    /// A specific UValue used when we want to return an error.
    /// For instance, out-of-bound access returns this object.
 public ";
%javamethodmodifiers urbi::UValue::operator, (const UValue &b)
"    /// We use an operator , that behaves like an assignment.  The
    /// only difference is when the rhs is void, in which case it is
    /// the regular comma which is used.  This allows to write \"uval,
    /// expr\" to mean \"compute expr and assign its result to uval,
    /// unless expr is void\".
 public ";
%javamethodmodifiers urbi::UValue::format_string
"    /// Return a legible definition of UDataType
 public ";
%javamethodmodifiers urbi::UValue::CTOR_AND_ASSIGN_AND_COMMA
"    // UFloats.
 public ";
%javamethodmodifiers urbi::UValue::CTOR_AND_ASSIGN_AND_COMMA
"    // Strings.
 public ";
%javamethodmodifiers urbi::UValue::CTOR_AND_ASSIGN_AND_COMMA
"    // Others.
 public ";
%javamethodmodifiers urbi::UValue::UList
"    /// Deep copy.
 public ";
%javamethodmodifiers urbi::UValue::UDictionary
"    /// Deep copy.
 public ";
%javamethodmodifiers urbi::UValue::UImage
"    /// Shallow copy.
 public ";
%javamethodmodifiers urbi::UValue::USound
"    /// Shallow copy.
 public ";
%javamethodmodifiers urbi::UValue::operator
"    /// This operator does nothing, but helps with the previous operator,.
    /// Indeed, when writing \"uval, void_expr\", the compiler complains
    /// about uval being evaluated for nothing.  Let's have it believe
    /// we're doing something...
 public ";
%javamethodmodifiers urbi::UValue::print
"    /// Print itself on \\c s, and return it.
 public ";
%typemap(javaimports) urbi::UVar
"  /** UVar class definition

     Each UVar instance corresponds to one URBI variable. The class
     provides access to the variable properties, and reading/writing
     the value to/from all known types.  */
"

%javamethodmodifiers urbi::UVar::UVar
"    /// Creates an unbound UVar. Call init() to bind it.
 public ";
%javamethodmodifiers urbi::UVar::init
"    // Bind to \\a object.slot.
 public ";
%javamethodmodifiers urbi::UVar::type
"    /// The type of the current content.
 public ";
%javamethodmodifiers urbi::UVar::syncValue
"    /// Request the current value, wait until it is available.
 public ";
%javamethodmodifiers urbi::UVar::keepSynchronized
"    /// Keep this UVar synchronized with kernel value.
 public ";
%javamethodmodifiers urbi::UVar::operator=(const UBinary&)
"    /// Deep copy.
 public ";
%javamethodmodifiers urbi::UVar::operator=(const UImage& i)
"    /// Deep copy.
 public ";
%javamethodmodifiers urbi::UVar::operator=(const USound& s)
"    /// Deep copy.
 public ";
%javamethodmodifiers urbi::UVar::as
"    /// Cast operator taking a dummy value of the target type.
 public ";
%javamethodmodifiers urbi::UVar::as
"    /// Generic cast operator using the extensible uvalue_cast mechanism.
 public ";
%javamethodmodifiers urbi::UVar::fill
"    /// Conveniance wrapper on as().
 public ";
%javamethodmodifiers urbi::UVar::UImage
"    /// In plugin mode, gives direct access to the buffer, which may
    /// not be valid after the calling function returns. Changes to
    /// the other fields of the structure have no effect.
 public ";
%javamethodmodifiers urbi::UVar::USound
"    /// In plugin mode, gives direct access to the buffer, which may
    /// not be valid after the calling function returns. Changes to
    /// the other fields of the structure have no effect.
 public ";
%javamethodmodifiers urbi::UVar::unnotify
"    /// Deactivate all callbacks associated with this UVar and stop synchro.
 public ";
%javamethodmodifiers urbi::UVar::in
"    /// Kernel operators.
 public ";
%javamethodmodifiers urbi::UVar::setBypass
"    /// Enable bypass-mode for this UVar. Plugin-mode only.
    /// In bypass mode, if the UVar contains binary data, the data is never
    /// copied. The consequence is that the data is only accessible from
    /// notifyChange callbacks (urbiScript or C++): it is invalidated as soon
    /// as all callbacks have returned.
 public ";
%javamethodmodifiers urbi::UVar::useRTP
"    /// Use RTP mode to transmit this variable if possible.
 public ";
%javamethodmodifiers urbi::UVar::check_
"    /// Check that impl_ is set or throw a runtime error.
 public ";
%javamethodmodifiers urbi::UVar::PRIVATE
"    /// True if the variable is a temporary and must not be stored in callbacks
 public ";
%javamethodmodifiers urbi::UVar::invariant
"    // Check that the invariants of this class are verified.
 public ";
