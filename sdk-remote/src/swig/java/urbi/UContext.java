/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package urbi;
  /** Methods available in both UObject and UVar
   *  Wrapper around UContextImpl to enable access through inheritance.
   */

public class UContext {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected UContext(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(UContext obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        urbiJNI.delete_UContext(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public UContext(UContextImpl ctx) {
    this(urbiJNI.new_UContext__SWIG_0(UContextImpl.getCPtr(ctx), ctx), true);
  }

  public UContext() {
    this(urbiJNI.new_UContext__SWIG_1(), true);
  }

  public UObjectHub getUObjectHub(String n) {
    long cPtr = urbiJNI.UContext_getUObjectHub(swigCPtr, this, n);
    return (cPtr == 0) ? null : new UObjectHub(cPtr, false);
  }

  public UObjectCPP getUObject(String n) {
    long cPtr = urbiJNI.UContext_getUObject(swigCPtr, this, n);
    return (cPtr == 0) ? null : new UObjectCPP(cPtr, false);
  }

      /// Send Urbi code (ghost connection in plugin mode, default
    /// connection in remote mode).
 public  void uobject_unarmorAndSend(String str) {
    urbiJNI.UContext_uobject_unarmorAndSend(swigCPtr, this, str);
  }

      /// Send buf to the connection hosting the UObject.
 public  void send(String str) {
    urbiJNI.UContext_send__SWIG_0(swigCPtr, this, str);
  }

  public void call(String object, String method, UAutoValue v1, UAutoValue v2, UAutoValue v3, UAutoValue v4, UAutoValue v5, UAutoValue v6) {
    urbiJNI.UContext_call__SWIG_0(swigCPtr, this, object, method, UAutoValue.getCPtr(v1), v1, UAutoValue.getCPtr(v2), v2, UAutoValue.getCPtr(v3), v3, UAutoValue.getCPtr(v4), v4, UAutoValue.getCPtr(v5), v5, UAutoValue.getCPtr(v6), v6);
  }

  public void call(String object, String method, UAutoValue v1, UAutoValue v2, UAutoValue v3, UAutoValue v4, UAutoValue v5) {
    urbiJNI.UContext_call__SWIG_1(swigCPtr, this, object, method, UAutoValue.getCPtr(v1), v1, UAutoValue.getCPtr(v2), v2, UAutoValue.getCPtr(v3), v3, UAutoValue.getCPtr(v4), v4, UAutoValue.getCPtr(v5), v5);
  }

  public void call(String object, String method, UAutoValue v1, UAutoValue v2, UAutoValue v3, UAutoValue v4) {
    urbiJNI.UContext_call__SWIG_2(swigCPtr, this, object, method, UAutoValue.getCPtr(v1), v1, UAutoValue.getCPtr(v2), v2, UAutoValue.getCPtr(v3), v3, UAutoValue.getCPtr(v4), v4);
  }

  public void call(String object, String method, UAutoValue v1, UAutoValue v2, UAutoValue v3) {
    urbiJNI.UContext_call__SWIG_3(swigCPtr, this, object, method, UAutoValue.getCPtr(v1), v1, UAutoValue.getCPtr(v2), v2, UAutoValue.getCPtr(v3), v3);
  }

  public void call(String object, String method, UAutoValue v1, UAutoValue v2) {
    urbiJNI.UContext_call__SWIG_4(swigCPtr, this, object, method, UAutoValue.getCPtr(v1), v1, UAutoValue.getCPtr(v2), v2);
  }

  public void call(String object, String method, UAutoValue v1) {
    urbiJNI.UContext_call__SWIG_5(swigCPtr, this, object, method, UAutoValue.getCPtr(v1), v1);
  }

  public void call(String object, String method) {
    urbiJNI.UContext_call__SWIG_6(swigCPtr, this, object, method);
  }

  public SWIGTYPE_p_boost__asio__io_service getIoService() {
    return new SWIGTYPE_p_boost__asio__io_service(urbiJNI.UContext_getIoService(swigCPtr, this), false);
  }

      /// Return the mode in which the code is running.
 public  UObjectMode getRunningMode() {
    return UObjectMode.swigToEnum(urbiJNI.UContext_getRunningMode(swigCPtr, this));
  }

      /// Return true if the code is running in plugin mode.
 public  boolean isPluginMode() {
    return urbiJNI.UContext_isPluginMode(swigCPtr, this);
  }

      /// Return true if the code is running in remote mode.
 public  boolean isRemoteMode() {
    return urbiJNI.UContext_isRemoteMode(swigCPtr, this);
  }

      /// Yield execution until next cycle.
    /// Process pending messages in remote mode.
 public  void yield() {
    urbiJNI.UContext_yield(swigCPtr, this);
  }

      /** Yield execution until something else is scheduled, or until a message is
     * received in remote mode.
     */
 public  void yield_until_things_changed() {
    urbiJNI.UContext_yield_until_things_changed(swigCPtr, this);
  }

      /** If \b s is true, mark the current task as having no side effect.
     * This call has no effect in remote mode.
     */
 public  void side_effect_free_set(boolean s) {
    urbiJNI.UContext_side_effect_free_set(swigCPtr, this, s);
  }

      /// Get the current side_effect_free state.
 public  boolean side_effect_free_get() {
    return urbiJNI.UContext_side_effect_free_get(swigCPtr, this);
  }

      /// Get the version of the kernel that will receive send() messages.
 public  IntPair kernelVersion() {
    return new IntPair(urbiJNI.UContext_kernelVersion(swigCPtr, this), true);
  }

  public void setCtx_(UContextImpl value) {
    urbiJNI.UContext_ctx__set(swigCPtr, this, UContextImpl.getCPtr(value), value);
  }

  public UContextImpl getCtx_() {
    long cPtr = urbiJNI.UContext_ctx__get(swigCPtr, this);
    return (cPtr == 0) ? null : new UContextImpl(cPtr, false);
  }

      /// Send buf to the connection hosting the UObject.
 public  void send(byte[] buf, long size) {
    urbiJNI.UContext_send__SWIG_2(swigCPtr, this, buf, size);
  }

      /// Yield execution for \b delay.
 public  void yield_for(long delay) {
    urbiJNI.UContext_yield_for(swigCPtr, this, delay);
  }

      /// Yield execution until \b deadline is met (see libport::utime()).
 public  void yield_until(long delay) {
    urbiJNI.UContext_yield_until(swigCPtr, this, delay);
  }

}
