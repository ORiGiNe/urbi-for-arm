/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package urbi;
  /** UVar class definition

     Each UVar instance corresponds to one URBI variable. The class
     provides access to the variable properties, and reading/writing
     the value to/from all known types.  */

public class UVar extends UContext {
  private long swigCPtr;

  protected UVar(long cPtr, boolean cMemoryOwn) {
    super(urbiJNI.SWIGUVarUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(UVar obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        urbiJNI.delete_UVar(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

      /// Creates an unbound UVar. Call init() to bind it.
 public  UVar() {
    this(urbiJNI.new_UVar__SWIG_0(), true);
  }

      /// Creates an unbound UVar. Call init() to bind it.
 public  UVar(String arg0, UContextImpl arg1) {
    this(urbiJNI.new_UVar__SWIG_1(arg0, UContextImpl.getCPtr(arg1), arg1), true);
  }

      /// Creates an unbound UVar. Call init() to bind it.
 public  UVar(String arg0) {
    this(urbiJNI.new_UVar__SWIG_2(arg0), true);
  }

      /// Creates an unbound UVar. Call init() to bind it.
 public  UVar(String arg0, String arg1, UContextImpl arg2) {
    this(urbiJNI.new_UVar__SWIG_3(arg0, arg1, UContextImpl.getCPtr(arg2), arg2), true);
  }

      /// Creates an unbound UVar. Call init() to bind it.
 public  UVar(String arg0, String arg1) {
    this(urbiJNI.new_UVar__SWIG_4(arg0, arg1), true);
  }

      /// Creates an unbound UVar. Call init() to bind it.
 public  UVar(UObjectCPP arg0, String arg1, UContextImpl arg2) {
    this(urbiJNI.new_UVar__SWIG_5(UObjectCPP.getCPtr(arg0), arg0, arg1, UContextImpl.getCPtr(arg2), arg2), true);
  }

      /// Creates an unbound UVar. Call init() to bind it.
 public  UVar(UObjectCPP arg0, String arg1) {
    this(urbiJNI.new_UVar__SWIG_6(UObjectCPP.getCPtr(arg0), arg0, arg1), true);
  }

      /// Creates an unbound UVar. Call init() to bind it.
 public  UVar(UVar arg0) {
    this(urbiJNI.new_UVar__SWIG_7(UVar.getCPtr(arg0), arg0), true);
  }

      // Bind to \a object.slot.
 public  void init(String varname, UContextImpl arg1) {
    urbiJNI.UVar_init__SWIG_0(swigCPtr, this, varname, UContextImpl.getCPtr(arg1), arg1);
  }

      // Bind to \a object.slot.
 public  void init(String varname) {
    urbiJNI.UVar_init__SWIG_1(swigCPtr, this, varname);
  }

      // Bind to \a object.slot.
 public  void init(String object, String slot, UContextImpl arg2) {
    urbiJNI.UVar_init__SWIG_2(swigCPtr, this, object, slot, UContextImpl.getCPtr(arg2), arg2);
  }

      // Bind to \a object.slot.
 public  void init(String object, String slot) {
    urbiJNI.UVar_init__SWIG_3(swigCPtr, this, object, slot);
  }

  public void setOwned() {
    urbiJNI.UVar_setOwned(swigCPtr, this);
  }

      /// The type of the current content.
 public  UDataType type() {
    return UDataType.swigToEnum(urbiJNI.UVar_type(swigCPtr, this));
  }

      /// Request the current value, wait until it is available.
 public  void syncValue() {
    urbiJNI.UVar_syncValue(swigCPtr, this);
  }

      /// Keep this UVar synchronized with kernel value.
 public  void keepSynchronized() {
    urbiJNI.UVar_keepSynchronized(swigCPtr, this);
  }

  public void reset(double arg0) {
    urbiJNI.UVar_reset(swigCPtr, this, arg0);
  }

  public UVar setValue(double arg0) {
    return new UVar(urbiJNI.UVar_setValue__SWIG_0(swigCPtr, this, arg0), false);
  }

  public UVar setValue(String arg0) {
    return new UVar(urbiJNI.UVar_setValue__SWIG_1(swigCPtr, this, arg0), false);
  }

      /// Deep copy.
 public  UVar setValue(UBinary arg0) {
    return new UVar(urbiJNI.UVar_setValue__SWIG_2(swigCPtr, this, UBinary.getCPtr(arg0), arg0), false);
  }

      /// Deep copy.
 public  UVar setValue(UImage i) {
    return new UVar(urbiJNI.UVar_setValue__SWIG_3(swigCPtr, this, UImage.getCPtr(i), i), false);
  }

      /// Deep copy.
 public  UVar setValue(USound s) {
    return new UVar(urbiJNI.UVar_setValue__SWIG_4(swigCPtr, this, USound.getCPtr(s), s), false);
  }

  public UVar setValue(UList l) {
    return new UVar(urbiJNI.UVar_setValue__SWIG_5(swigCPtr, this, UList.getCPtr(l), l), false);
  }

  public UVar setValue(UDictionary d) {
    return new UVar(urbiJNI.UVar_setValue__SWIG_6(swigCPtr, this, UDictionary.getCPtr(d), d), false);
  }

  public UVar setValue(UValue v) {
    return new UVar(urbiJNI.UVar_setValue__SWIG_7(swigCPtr, this, UValue.getCPtr(v), v), false);
  }

  public int intValue() {
    return urbiJNI.UVar_intValue(swigCPtr, this);
  }

  public boolean booleanValue() {
    return urbiJNI.UVar_booleanValue(swigCPtr, this);
  }

  public UBinary ubinaryValue() {
    return new UBinary(urbiJNI.UVar_ubinaryValue__SWIG_0(swigCPtr, this), false);
  }

  public UImage uimageValue() {
    return new UImage(urbiJNI.UVar_uimageValue(swigCPtr, this), true);
  }

  public USound usoundValue() {
    return new USound(urbiJNI.UVar_usoundValue(swigCPtr, this), true);
  }

  public double doubleValue() {
    return urbiJNI.UVar_doubleValue(swigCPtr, this);
  }

  public String stringValue() {
    return urbiJNI.UVar_stringValue(swigCPtr, this);
  }

  public UList ulistValue() {
    return new UList(urbiJNI.UVar_ulistValue(swigCPtr, this), true);
  }

  public UDictionary udictionaryValue() {
    return new UDictionary(urbiJNI.UVar_udictionaryValue(swigCPtr, this), true);
  }

      /// Deactivate all callbacks associated with this UVar and stop synchro.
 public  void unnotify() {
    urbiJNI.UVar_unnotify(swigCPtr, this);
  }

  public void setOwned(boolean value) {
    urbiJNI.UVar_owned_set(swigCPtr, this, value);
  }

  public boolean getOwned() {
    return urbiJNI.UVar_owned_get(swigCPtr, this);
  }

  public UValue getProp(UProperty prop) {
    return new UValue(urbiJNI.UVar_getProp(swigCPtr, this, prop.swigValue()), true);
  }

  public void setProp(UProperty prop, UValue v) {
    urbiJNI.UVar_setProp__SWIG_0(swigCPtr, this, prop.swigValue(), UValue.getCPtr(v), v);
  }

  public void setProp(UProperty prop, double v) {
    urbiJNI.UVar_setProp__SWIG_1(swigCPtr, this, prop.swigValue(), v);
  }

  public void setProp(UProperty prop, String v) {
    urbiJNI.UVar_setProp__SWIG_2(swigCPtr, this, prop.swigValue(), v);
  }

      /// Enable bypass-mode for this UVar. Plugin-mode only.
    /// In bypass mode, if the UVar contains binary data, the data is never
    /// copied. The consequence is that the data is only accessible from
    /// notifyChange callbacks (urbiScript or C++): it is invalidated as soon
    /// as all callbacks have returned.
 public  boolean setBypass(boolean enable) {
    return urbiJNI.UVar_setBypass__SWIG_0(swigCPtr, this, enable);
  }

      /// Enable bypass-mode for this UVar. Plugin-mode only.
    /// In bypass mode, if the UVar contains binary data, the data is never
    /// copied. The consequence is that the data is only accessible from
    /// notifyChange callbacks (urbiScript or C++): it is invalidated as soon
    /// as all callbacks have returned.
 public  boolean setBypass() {
    return urbiJNI.UVar_setBypass__SWIG_1(swigCPtr, this);
  }

      /// Use RTP mode to transmit this variable if possible.
 public  void useRTP(boolean enable) {
    urbiJNI.UVar_useRTP__SWIG_0(swigCPtr, this, enable);
  }

      /// Use RTP mode to transmit this variable if possible.
 public  void useRTP() {
    urbiJNI.UVar_useRTP__SWIG_1(swigCPtr, this);
  }

  public void setImpl_(UVarImpl value) {
    urbiJNI.UVar_impl__set(swigCPtr, this, UVarImpl.getCPtr(value), value);
  }

  public UVarImpl getImpl_() {
    long cPtr = urbiJNI.UVar_impl__get(swigCPtr, this);
    return (cPtr == 0) ? null : new UVarImpl(cPtr, false);
  }

  public UValue val() {
    return new UValue(urbiJNI.UVar_val(swigCPtr, this), false);
  }

  public long timestamp() {
    return urbiJNI.UVar_timestamp(swigCPtr, this);
  }

  public void check() {
    urbiJNI.UVar_check(swigCPtr, this);
  }

  public boolean get_temp() {
    return urbiJNI.UVar_get_temp__SWIG_0(swigCPtr, this);
  }

  public void set_temp(boolean v) {
    urbiJNI.UVar_set_temp(swigCPtr, this, v);
  }

  public UVar.RtpMode get_rtp() {
    return UVar.RtpMode.swigToEnum(urbiJNI.UVar_get_rtp__SWIG_0(swigCPtr, this));
  }

  public void set_rtp(UVar.RtpMode v) {
    urbiJNI.UVar_set_rtp(swigCPtr, this, v.swigValue());
  }

  public boolean get_local() {
    return urbiJNI.UVar_get_local__SWIG_0(swigCPtr, this);
  }

  public void set_local(boolean v) {
    urbiJNI.UVar_set_local(swigCPtr, this, v);
  }

  public UValue getUValue() {
    return new UValue(urbiJNI.UVar_getUValue(swigCPtr, this), false);
  }

  public String getName() {
    return urbiJNI.UVar_getName(swigCPtr, this);
  }

  public void setName(String name) {
    urbiJNI.UVar_setName(swigCPtr, this, name);
  }

  public enum RtpMode {
    RTP_DEFAULT,
    RTP_YES,
    RTP_NO;

    public final int swigValue() {
      return swigValue;
    }

    public static RtpMode swigToEnum(int swigValue) {
      RtpMode[] swigValues = RtpMode.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (RtpMode swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + RtpMode.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private RtpMode() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private RtpMode(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private RtpMode(RtpMode swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
