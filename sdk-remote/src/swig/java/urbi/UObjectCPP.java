/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package urbi;
  /** Main UObject class definition
      Each UObject instance corresponds to an URBI object.
      It provides mechanisms to bind variables and functions between
      C++ and Urbi.
  */

public class UObjectCPP extends UContext {
  private long swigCPtr;

  protected UObjectCPP(long cPtr, boolean cMemoryOwn) {
    super(urbiJNI.SWIGUObjectCPPUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(UObjectCPP obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        urbiJNI.delete_UObjectCPP(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    urbiJNI.UObjectCPP_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    urbiJNI.UObjectCPP_change_ownership(this, swigCPtr, true);
  }

      /// Reserved for internal use
 public  UObjectCPP(UContextImpl impl) {
    this(urbiJNI.new_UObjectCPP__SWIG_0(UContextImpl.getCPtr(impl), impl), true);
    urbiJNI.UObjectCPP_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

      /// Reserved for internal use
 public  UObjectCPP() {
    this(urbiJNI.new_UObjectCPP__SWIG_1(), true);
    urbiJNI.UObjectCPP_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

      /// Reserved for internal use
 public  UObjectCPP(String arg0, UContextImpl impl) {
    this(urbiJNI.new_UObjectCPP__SWIG_2(arg0, UContextImpl.getCPtr(impl), impl), true);
    urbiJNI.UObjectCPP_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

      /// Reserved for internal use
 public  UObjectCPP(String arg0) {
    this(urbiJNI.new_UObjectCPP__SWIG_3(arg0), true);
    urbiJNI.UObjectCPP_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

      /// Reserved for internal use
 public  UObjectCPP(int arg0, UContextImpl impl) {
    this(urbiJNI.new_UObjectCPP__SWIG_4(arg0, UContextImpl.getCPtr(impl), impl), true);
    urbiJNI.UObjectCPP_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

      /// Reserved for internal use
 public  UObjectCPP(int arg0) {
    this(urbiJNI.new_UObjectCPP__SWIG_5(arg0), true);
    urbiJNI.UObjectCPP_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

      /// Remove a timer registered with USetTimer.
 public  boolean removeTimer(TimerHandle h) {
    return urbiJNI.UObjectCPP_removeTimer(swigCPtr, this, TimerHandle.getCPtr(h), h);
  }

      /// Request permanent synchronization for v.
 public  void USync(UVar v) {
    urbiJNI.UObjectCPP_USync(swigCPtr, this, UVar.getCPtr(v), v);
  }

  public void set__name(String value) {
    urbiJNI.UObjectCPP___name_set(swigCPtr, this, value);
  }

  public String get__name() {
    return urbiJNI.UObjectCPP___name_get(swigCPtr, this);
  }

  public void setClassname(String value) {
    urbiJNI.UObjectCPP_classname_set(swigCPtr, this, value);
  }

  public String getClassname() {
    return urbiJNI.UObjectCPP_classname_get(swigCPtr, this);
  }

  public void setDerived(boolean value) {
    urbiJNI.UObjectCPP_derived_set(swigCPtr, this, value);
  }

  public boolean getDerived() {
    return urbiJNI.UObjectCPP_derived_get(swigCPtr, this);
  }

  public void setObjecthub(UObjectHub value) {
    urbiJNI.UObjectCPP_objecthub_set(swigCPtr, this, UObjectHub.getCPtr(value), value);
  }

  public UObjectHub getObjecthub() {
    long cPtr = urbiJNI.UObjectCPP_objecthub_get(swigCPtr, this);
    return (cPtr == 0) ? null : new UObjectHub(cPtr, false);
  }

      /// Set a timer that will call the update function every 'period'
    /// milliseconds.
 public  void USetUpdate(double period) {
    urbiJNI.UObjectCPP_USetUpdate(swigCPtr, this, period);
  }

  public int update() {
    return (getClass() == UObjectCPP.class) ? urbiJNI.UObjectCPP_update(swigCPtr, this) : urbiJNI.UObjectCPP_updateSwigExplicitUObjectCPP(swigCPtr, this);
  }

  public void UAutoGroup() {
    urbiJNI.UObjectCPP_UAutoGroup(swigCPtr, this);
  }

  public void addAutoGroup() {
    if (getClass() == UObjectCPP.class) urbiJNI.UObjectCPP_addAutoGroup(swigCPtr, this); else urbiJNI.UObjectCPP_addAutoGroupSwigExplicitUObjectCPP(swigCPtr, this);
  }

  public void UJoinGroup(String gpname) {
    if (getClass() == UObjectCPP.class) urbiJNI.UObjectCPP_UJoinGroup(swigCPtr, this, gpname); else urbiJNI.UObjectCPP_UJoinGroupSwigExplicitUObjectCPP(swigCPtr, this, gpname);
  }

  public void setAutogroup(boolean value) {
    urbiJNI.UObjectCPP_autogroup_set(swigCPtr, this, value);
  }

  public boolean getAutogroup() {
    return urbiJNI.UObjectCPP_autogroup_get(swigCPtr, this);
  }

      /// \}
    /// Void function used in USync callbacks.
 public  int voidfun() {
    return urbiJNI.UObjectCPP_voidfun(swigCPtr, this);
  }

  public void setRemote(boolean value) {
    urbiJNI.UObjectCPP_remote_set(swigCPtr, this, value);
  }

  public boolean getRemote() {
    return urbiJNI.UObjectCPP_remote_get(swigCPtr, this);
  }

      /// Remove all bindings, this method is called by the destructor.
 public  void clean() {
    urbiJNI.UObjectCPP_clean(swigCPtr, this);
  }

  public SWIGTYPE_p_libport__ThreadPool__rTaskLock getTaskLock(LockMode m, String what) {
    return new SWIGTYPE_p_libport__ThreadPool__rTaskLock(urbiJNI.UObjectCPP_getTaskLock__SWIG_0(swigCPtr, this, m.swigValue(), what), true);
  }

  public SWIGTYPE_p_libport__ThreadPool__rTaskLock getTaskLock(LockSpec s, String what) {
    return new SWIGTYPE_p_libport__ThreadPool__rTaskLock(urbiJNI.UObjectCPP_getTaskLock__SWIG_1(swigCPtr, this, LockSpec.getCPtr(s), s, what), true);
  }

  public UObjectImpl impl_get() {
    long cPtr = urbiJNI.UObjectCPP_impl_get(swigCPtr, this);
    return (cPtr == 0) ? null : new UObjectImpl(cPtr, false);
  }

      // Override me to have your own LOCK_CLASS task lock.
 public  SWIGTYPE_p_libport__ThreadPool__rTaskLock getClassTaskLock() {
    return new SWIGTYPE_p_libport__ThreadPool__rTaskLock((getClass() == UObjectCPP.class) ? urbiJNI.UObjectCPP_getClassTaskLock(swigCPtr, this) : urbiJNI.UObjectCPP_getClassTaskLockSwigExplicitUObjectCPP(swigCPtr, this), true);
  }

  public void setLoad(UValue val) {
    urbiJNI.UObjectCPP_setLoad(swigCPtr, this, UValue.getCPtr(val), val);
  }

  public UVar getLoad() {
    return new UVar(urbiJNI.UObjectCPP_getLoad(swigCPtr, this), false);
  }

  public void setCloner(baseURBIStarter cloner) {
    urbiJNI.UObjectCPP_setCloner(swigCPtr, this, baseURBIStarter.getCPtr(cloner), cloner);
  }

}
