/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package urbi;
  ///Linux implementation of UAbstractClient.
  /*! This implementation uses a shared thread between all the instances to
   * handle Socket operations, and call the registered callbacks in that thread.
  */

public class UClient extends UAbstractClient {
  private long swigCPtr;

  protected UClient(long cPtr, boolean cMemoryOwn) {
    super(urbiJNI.SWIGUClientUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(UClient obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        urbiJNI.delete_UClient(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public UClient(String host, long port, long buflen) {
    this(urbiJNI.new_UClient__SWIG_0(host, port, buflen), true);
  }

  public UClient(String host, long port) {
    this(urbiJNI.new_UClient__SWIG_1(host, port), true);
  }

  public UClient(String host) {
    this(urbiJNI.new_UClient__SWIG_2(host), true);
  }

  public UClient() {
    this(urbiJNI.new_UClient__SWIG_3(), true);
  }

      /** Block until kernel version is available or an error occurrs.
     * Message processing must not depend on this thread.
     */
 public  void waitForKernelVersion() {
    urbiJNI.UClient_waitForKernelVersion(swigCPtr, this);
  }

      /// Bounce to listen or connect, depending whether server mode.
 public  int start() {
    return urbiJNI.UClient_start(swigCPtr, this);
  }

  public int closeUClient() {
    return urbiJNI.UClient_closeUClient(swigCPtr, this);
  }

  public void printf(String format) {
    urbiJNI.UClient_printf(swigCPtr, this, format);
  }

      /// Get time in milliseconds since an unspecified but constant
    /// reference time.
 public  long getCurrentTime() {
    return urbiJNI.UClient_getCurrentTime(swigCPtr, this);
  }

  public void setKeepAliveCheck(long pingInterval, long pongTimeout) {
    urbiJNI.UClient_setKeepAliveCheck(swigCPtr, this, pingInterval, pongTimeout);
  }

      /// Send the remainder of the stream.
 public  int send(String format) {
    return urbiJNI.UClient_send_SWIG_0_0(swigCPtr, this, format);
  }

      /// Send the remainder of the stream.
 public  int send(UValue v) {
    return urbiJNI.UClient_send_SWIG_0_2(swigCPtr, this, UValue.getCPtr(v), v);
  }

  public void setSynchronousSend(boolean enable) {
    urbiJNI.UClient_setSynchronousSend(swigCPtr, this, enable);
  }

}
