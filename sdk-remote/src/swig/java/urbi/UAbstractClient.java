/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package urbi;
  /// Interface for an URBI wrapper object.
  /*! Implementations of this interface are wrappers around the URBI protocol.
    It handles URBI messages parsing, callback registration and various
    formatting functions.
    Implementations of this interface should:
    - Redefine errorNotify() as a function able to notify the user of eventual
    errors.
    - Redfine the four mutual exclusion functions.
    - Redefine effectiveSend().
    - Fill recvBuffer, update recvBufferPosition and call processRecvBuffer()
    when new data is available.
    - Provide an execute() function in the namespace urbi, that never returns,
    and that will be called after initialization.
    - Call onConnection when the connection is established.

   See the liburbi-cpp documentation for more informations on
   how to use this class.
  */

public class UAbstractClient extends LockableOstream {
  private long swigCPtr;

  protected UAbstractClient(long cPtr, boolean cMemoryOwn) {
    super(urbiJNI.SWIGUAbstractClientUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(UAbstractClient obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        urbiJNI.delete_UAbstractClient(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

      /// Default host.
 public  static String default_host() {
    return urbiJNI.UAbstractClient_default_host();
  }

  public boolean init() {
    return urbiJNI.UAbstractClient_init(swigCPtr, this);
  }

      /// Return current error status, or zero if no error occurred.
 public  int error() {
    return urbiJNI.UAbstractClient_error(swigCPtr, this);
  }

      /// Send the remainder of the stream.
 public  int send(String format) {
    return urbiJNI.UAbstractClient_send__SWIG_0(swigCPtr, this, format);
  }

      /// Send the remainder of the stream.
 public  int send(UValue v) {
    return urbiJNI.UAbstractClient_send__SWIG_2(swigCPtr, this, UValue.getCPtr(v), v);
  }

      /// Lock the send buffer (for backward compatibility, will be
    /// removed in future versions).
 public  int startPack() {
    return urbiJNI.UAbstractClient_startPack(swigCPtr, this);
  }

      /// Unlock the send buffer (for backward compatibility, will be
    /// removed in future versions).
 public  int endPack() {
    return urbiJNI.UAbstractClient_endPack(swigCPtr, this);
  }

  public int pack(String format) {
    return urbiJNI.UAbstractClient_pack(swigCPtr, this, format);
  }

      /// Send urbi commands contained in a file.
    /// The file "/dev/stdin" is recognized as referring to std::cin.
 public  int sendFile(String f) {
    return urbiJNI.UAbstractClient_sendFile(swigCPtr, this, f);
  }

  public int sendSound(String device, USound sound, String tag) {
    return urbiJNI.UAbstractClient_sendSound__SWIG_0(swigCPtr, this, device, USound.getCPtr(sound), sound, tag);
  }

  public int sendSound(String device, USound sound) {
    return urbiJNI.UAbstractClient_sendSound__SWIG_1(swigCPtr, this, device, USound.getCPtr(sound), sound);
  }

      /// Put a file on the robot's mass storage device.
 public  int putFile(String localName, String remoteName) {
    return urbiJNI.UAbstractClient_putFile__SWIG_0(swigCPtr, this, localName, remoteName);
  }

      /// Put a file on the robot's mass storage device.
 public  int putFile(String localName) {
    return urbiJNI.UAbstractClient_putFile__SWIG_1(swigCPtr, this, localName);
  }

      /// OLD-style callbacks
 public  long setCallback(UCallbackWrapper callback, String tag) {
    return urbiJNI.UAbstractClient_setCallback__SWIG_0(swigCPtr, this, UCallbackWrapper.getCPtr(callback), callback, tag);
  }

      /// Associate a callback function with all error messages from the server
 public  long setErrorCallback(UCallbackWrapper callback) {
    return urbiJNI.UAbstractClient_setErrorCallback(swigCPtr, this, UCallbackWrapper.getCPtr(callback), callback);
  }

      /// Associate a callback with all messages
 public  long setWildcardCallback(UCallbackWrapper callback) {
    return urbiJNI.UAbstractClient_setWildcardCallback(swigCPtr, this, UCallbackWrapper.getCPtr(callback), callback);
  }

      /// Associate a callback with local connection errors
 public  long setClientErrorCallback(UCallbackWrapper callback) {
    return urbiJNI.UAbstractClient_setClientErrorCallback(swigCPtr, this, UCallbackWrapper.getCPtr(callback), callback);
  }

      //@}
    /// Get the tag associated with a registered callback.
    /// \return 1 and fill tag on success, 0 on failure.
 public  int getAssociatedTag(long id, String tag) {
    return urbiJNI.UAbstractClient_getAssociatedTag(swigCPtr, this, id, tag);
  }

      /// Delete a callback.
    /// \return 0 if no callback with this id was found, 1 otherwise.
 public  int deleteCallback(long id) {
    return urbiJNI.UAbstractClient_deleteCallback(swigCPtr, this, id);
  }

      /// Return a identifier, for tags for instance.
 public  String fresh() {
    return urbiJNI.UAbstractClient_fresh(swigCPtr, this);
  }

  public void makeUniqueTag(String tag) {
    urbiJNI.UAbstractClient_makeUniqueTag(swigCPtr, this, tag);
  }

      /// Pass the given UMessage to all registered callbacks with the
    /// corresponding tag, as if it were comming from the URBI server.
 public  void notifyCallbacks(UMessage msg) {
    urbiJNI.UAbstractClient_notifyCallbacks(swigCPtr, this, UMessage.getCPtr(msg), msg);
  }

  public void printf(String format) {
    urbiJNI.UAbstractClient_printf(swigCPtr, this, format);
  }

      /// Get time in milliseconds since an unspecified but constant
    /// reference time.
 public  long getCurrentTime() {
    return urbiJNI.UAbstractClient_getCurrentTime(swigCPtr, this);
  }

  public void setKeepAliveCheck(long pingInterval, long pongTimeout) {
    urbiJNI.UAbstractClient_setKeepAliveCheck(swigCPtr, this, pingInterval, pongTimeout);
  }

      /// Return the server name or IP address.
 public  String getServerName() {
    return urbiJNI.UAbstractClient_getServerName(swigCPtr, this);
  }

      /// Return the server port.
 public  long getServerPort() {
    return urbiJNI.UAbstractClient_getServerPort(swigCPtr, this);
  }

      /// Called each time new data is available in recvBuffer.
 public  void processRecvBuffer() {
    urbiJNI.UAbstractClient_processRecvBuffer(swigCPtr, this);
  }

  public static void setCLIENTERROR_TAG(String value) {
    urbiJNI.UAbstractClient_CLIENTERROR_TAG_set(value);
  }

  public static String getCLIENTERROR_TAG() {
    return urbiJNI.UAbstractClient_CLIENTERROR_TAG_get();
  }

      /// Kernel version string.
    /// Call waitForKernelVersion to make sure it is defined (beware
    /// that there are two signatures, one for UAbstractClient,
    /// another for USyncClient).
 public  String kernelVersion() {
    return urbiJNI.UAbstractClient_kernelVersion(swigCPtr, this);
  }

      /// Major kernel version.  Dies if unknown yet.
 public  int kernelMajor() {
    return urbiJNI.UAbstractClient_kernelMajor(swigCPtr, this);
  }

      /// Minor kernel version.  Dies if unknown yet.
 public  int kernelMinor() {
    return urbiJNI.UAbstractClient_kernelMinor(swigCPtr, this);
  }

      /** Block until kernel version is available or an error occurrs.
     * Message processing must not depend on this thread.
     */
 public  void waitForKernelVersion() {
    urbiJNI.UAbstractClient_waitForKernelVersion(swigCPtr, this);
  }

  public String connectionID() {
    return urbiJNI.UAbstractClient_connectionID(swigCPtr, this);
  }

  public int getCurrentTimestamp() {
    return urbiJNI.UAbstractClient_getCurrentTimestamp(swigCPtr, this);
  }

      /// OLD-style callbacks
 public  long setCallback(UCallbackInterface ref, String tag) {
    return urbiJNI.UAbstractClient_setCallback__SWIG_6(swigCPtr, this, UCallbackInterface.getCPtr(ref), ref, tag);
  }

      /// Send binary data.
 public  void sendBin(byte[] bin, int len) {
    urbiJNI.UAbstractClient_sendBin__SWIG_0(swigCPtr, this, bin, len);
  }

      /// Send binary data.
 public  void sendBin(byte[] bin, int len, String header) {
    urbiJNI.UAbstractClient_sendBin__SWIG_1(swigCPtr, this, bin, len, header);
  }

  public final static int URBI_BUFLEN = 128000;

  public final static int URBI_PORT = 54000;

}
