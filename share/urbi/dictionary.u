/*
 * Copyright (C) 2010, 2011, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

requireFile("urbi/call-message.u");
requireFile("urbi/container.u");
requireFile("urbi/global.u");
requireFile("urbi/exception.u");
requireFile("urbi/boolean.u");
requireFile("urbi/control.u");
requireFile("urbi/list.u");
requireFile("urbi/channel.u");
requireFile("urbi/range-iterable.u");
requireFile("urbi/comparable.u");

do (Global.Dictionary)
{
  protos = [Global.RangeIterable, Global.Comparable, Global.Container];

  class KeyError: Exception
  {
    function init(name)
    {
      var this.key = name |
      Exception.&init.apply([this, "missing key: %s" % name])
    }
  };

  /// Dictionary.init(KEY1, VAL1, ...).
  function init(var args[])
  {
    if (args.size % 2)
      throw Exception.Primitive.new("new", "odd number of arguments") |
    for| (var i = 0; i < args.size; i += 2)
      set(args[i], args[i + 1]) |
    this
  };

  function asList()
  {
    var res = []|
    for| (var k: keys)
      res.insertBack(Pair.new(k, get(k)))|
    res
  };

  function asString()
  {
    if (empty)
      "[ => ]"
    else
    {
      var sep = "" |
      var res = "[" |
      for| (var k: keys)
      {
        res += "%s%s => %s" % [sep, k.asPrintable, get(k).asPrintable] |
        sep = ", " |
      }|
      res +  "]"
    }
  };

  function getWithDefault(name, otherwise, insert = false)
  {
    if (has(name))
      get(name)
    else
    {
      if (insert)
        set(name, otherwise) |
      otherwise
    }
  };

  // Syntactic sugar.
  copySlot("get", "[]");
  function '[]=' (k, v)
  {
    set(k, v) |
    v
  };

  // Compare two dictionaries.  This suppose that elements are Comparable.
  function '==' (rhs)
  {
    size == rhs.size
    &&
    {
      for|(var k: keys)
        if (!rhs.has(k) || get(k) != rhs.get(k))
          return false |
      true
    }
  };

  // Extends the dictionary with the one provided in its argument.
  function extend (ext)
  {
    for|(var item: ext)
      set(item.first, item.second) |
    this
  };

  // Pattern matching.
  function matchAgainst(handler, pattern)
  {
    pattern.isA(Dictionary)
    &&
    {
      for| (var k: pattern.keys)
        if (!has(k) || !handler.matchPattern(pattern[k], this[k]))
          return false |
      true
    }
  };

};
