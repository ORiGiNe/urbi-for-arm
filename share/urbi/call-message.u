/*
 * Copyright (C) 2010, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

requireFile("urbi/global.u");
requireFile("urbi/object.u");

class Global.CallMessage
{
  // Non-evaluated target
  var targetLazy;

  // All evaluated arguments including target as first element
  function allArgs()
  {
    evalOnce |
    allArgs = [targetLazy] + args
  };

  function argAt(var i)
  {
    args[i].value
  };

  function argsCount()
  {
    args.size
  };

  function argsPrint()
  {
    // Pretty print arguments.
    argsPrint = argsVal.map(closure (var v) { v.asPrintable }) |
    if (targetLazy.asString == "<IMPLICIT>")
      argsPrint[0] = "" |
    argsPrint
  };

  function argsStr()
  {
    // Evaluate arguments.
    argsStr = allArgs.map(closure (var v) { v.asString }) |
    if (targetLazy.asString == "<IMPLICIT>")
      argsStr[0] = "" |
    argsStr
  };

  function argString(var i)
  {
    args[i].asString
  };

  function argsVal()
  {
    // Retrieve arguments values.
    var unevaluated = Object.new |
    var unevaluated.asString = "?" |
    argsVal = allArgs.map(closure (var v) {
      if (v.&val.isVoid || v.&val.allProtos.hasSame(Executable))
        unevaluated
      else
        v.val
    })
  };

  // Set/updated by Object.callMessage.
  var code;

  function evalArgAt(var i)
  {
    args[i].eval
  };

  function eval(var args[])
  {
    value = &target.callMessage(this)
  };

  function evalOnce()
  {
    eval |
    evalOnce = function() {} |
    void
  };

  function evalArgs()
  {
    args.map(function (arg) { arg.eval })
  };

  /// Used by format functions.
  var '$opNeg' =
    [
      "=="  => "!=",
      "===" => "!==",
      "<"   => ">=",
      "<="  => ">",
      "in"  => "not in",
    ] |

  // Add the opposite.
  for|(var k: '$opNeg'.keys)
    '$opNeg'.set('$opNeg'.get(k), k);

  var '$funRename' =
    [
      "has"    => "in",
      "hasNot" => "not in",
    ];

  /// callFormat
  function format(var formatArgs = argsStr)
  {
    if (formatArgs.size == 1 && message in ["!"])
      "%s %s" % [message, formatArgs[0]]
    else if (formatArgs.size == 2 && message in '$funRename')
      "%s %s %s" % [formatArgs[1], '$funRename'[message], formatArgs[0]]
    else if (formatArgs.size == 2 && message in '$opNeg')
      "%s %s %s" % [formatArgs[0], message, formatArgs[1]]
    else if (2 <= formatArgs.size)
    {
      if (formatArgs[0])
        "%s.%s(%s)" % [formatArgs[0], message, formatArgs.tail.join(", ")]
      else
        "%s(%s)" % [message, formatArgs.tail.join(", ")]
    }
    else
    {
      if (formatArgs[0])
        "%s.%s" % [formatArgs[0], message]
      else
        "%s" % [message]
    }
  };

  /// callNegatedFormat
  function negatedFormat(var formatArgs = argsStr)
  {
    if (formatArgs.size == 1 && message in ["!"])
      "%s %s == %s" % [message, formatArgs[0], value]
    else if (formatArgs.size == 2 && message in '$funRename')
      "%s %s %s" % [formatArgs[1], '$opNeg'['$funRename'[message]],
                    formatArgs[0]]
    else if (formatArgs.size == 2 && message in '$opNeg')
      "%s %s %s" % [formatArgs[0], '$opNeg'[message], formatArgs[1]]
    else if (2 <= formatArgs.size)
    {
      if (formatArgs[0])
        "%s.%s(%s) == %s" % [formatArgs[0], message,
                             formatArgs.tail.join(", "), value]
      else
        "%s(%s) == %s" % [message, formatArgs.tail.join(", "), value]
    }
    else
    {
      if (formatArgs[0])
        "%s.%s == %s" % [formatArgs[0], message, value]
      else
        "%s == %s" % [message, value]
    }
  };

  function value()
  {
    eval
  };
};
