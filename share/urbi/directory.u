/*
 * Copyright (C) 2010-2011, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

requireFile("urbi/file.u");
requireFile("urbi/path.u");
requireFile("urbi/exception.u");

do(Global.Directory)
{
  function '$doInto'(rhs, action, routine)
  {
    var dir;
    if (rhs.isA(Directory))
      dir = rhs
    else if (rhs.isA(Path) || rhs.isA(String))
      dir = Directory.new(rhs)
    else
      throw Exception.argumentTypeException(routine, 1, rhs,
                                            [Directory, Path, String]) |
    var path = Path.new(dir.asString) / Path.new(basename) |
    getSlot(action).apply([this, path.asString])
  };

  function '/'(rhs)
  {
    var path = asPath / Path.new(rhs) |
    if (path.isDir)
      Directory.new(path.asString)
    else if(path.exists)
      File.new(path.asString)
    else
      throw Exception.FileNotFound.new("/", path)
  };

  function '<<'(rhs)
  {
    if (!rhs.isA(File) && !rhs.isA(Directory))
      throw Exception.argumentTypeException(
                        '<<', 1, rhs.type, [File, Directory]) |
    var path = Path.new(asString) / Path.new(rhs.basename) |
    rhs.copy(path.asString) |
    this
  };

  function copy(dirname)
  {
    var dir = Directory.createAll(dirname) |
    for (var item: content)
      dir << this / item |
    dir
  };

  function copyInto(dir)
  {
    '$doInto'(dir, "copy", "copyInto")
  };

  function moveInto(dir)
  {
    '$doInto'(dir, "rename", "moveInto")
  };

  function removeAll()
  {
    if (this === Global.Directory)
      throw Exception.Primitive.new("removeAll",
                                    "cannot call method on %s"
                                    % Global.Directory.type) |
    removeAll_
  };

  function size()
  {
    var res = 0;
    for (var item: content)
      res += (this / item).size;
    res
  };
};
