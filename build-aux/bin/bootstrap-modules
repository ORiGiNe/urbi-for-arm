#! /usr/bin/perl

# Bootstrap Urbi module buildsystem.
# Input: module.ac files in subdirectories, optionally module.mk files.
# Output: ./modules.ac to include in your configure.ac
#         ./modules.mk to include in your Makefile.am
# module.ac expected content: Autoconf code that sets urbi_enable_module=false
#   to disable the module. Empty is fine.
# module.mk is autogenerated if not present, using all recursively found source
#   files in the module directory
#

BEGIN
{
  use File::Basename;
  unshift @INC, dirname($0) . '/../lib/perl';
}

use BuildAux::FileUtils;
use BuildAux::Verbose;
use BuildAux::XFile;
use File::Basename; # dirname.
use strict;

my $prefix = '';

# depends dependency...
# ---------------------
# Announce that the stamp file depends on the dependency files.
my @dependency;
sub depends(@)
{
  my (@deps) = @_;
  push @dependency, @deps;
}

=item C<module_name($acfile)>

Return the module name for a given C<module.ac> path.

=cut

sub module_name ($)
{
  basename (dirname ($_[0]));
}

=item C<module_identifier($acfile)>

Return the variable name (i.e., usuable as a variable name, no dash
etc.) for a given C<module.ac> path.

=cut

sub module_identifier ($)
{
  my $res = module_name ($_[0]);
  $res =~ s/\W/_/g;
  $res;
}

=item C<per_module_name>

Sort function for C<$a> and C<$b>, two paths to F<module.ac> files.

=cut

sub per_module_name
{
  module_name($a) cmp module_name($b);
}



=item C<urbi_module_ac($module_ac)>

Transform a user writtern C<$module_ac> file into one with
C<URBI_MODULE> invocation in C<$module_ac.auto.tmp>.

=cut

sub urbi_module_ac ($)
{
  my ($acfile) = @_;
  my $module_identifier = module_identifier($acfile);

  verbose 3, "Generating and appending $acfile.auto";
  my $body = contents($acfile);

  # Get leading ## comments.
  $body =~ m{\A((?:^(?:##.*)?\n)+)}m;
  my $header = defined $1 ? $1 : "";

  # Remove ## comments.
  $body =~ s/^##.*\n//gm;
  # Remove useless blanks.
  $body =~ s/^\s+//gs;
  $body =~ s/\s+$/\n/gs;

  my $acfile_auto = new BuildAux::XFile (">$acfile.auto.tmp");
  print $acfile_auto
    ("## Generated by $me.\n",
     "## Do not edit by hand.\n\n",
     "$header",
     "URBI_MODULE([$module_identifier],\n",
     "[\n",
     "$body\n",
     "])\n",
     "\n",
     # Obfuscated so that Emacs don't read it.
     "## Local " . "Variables:\n",
     "## mode: autoconf\n",
     "## End:\n",
    );
}


=item C<getopt()>

Process the command line arguments.

=cut

sub getopt ()
{
  use BuildAux::Getopt qw($message);
  $message = "Booststrap the module repository, or part thereof";
  BuildAux::Getopt::getopt
    (
     "p|prefix=s"       => \$prefix,
    );

  if (@ARGV)
  {
    stderr "use --prefix instead of passing the prefix as argument";
    $prefix = shift @ARGV;
  }

  die "unexpected arguments: @ARGV"
      if @ARGV;
}


## ------ ##
## Main.  ##
## ------ ##

getopt;
my $modules_ac = new BuildAux::XFile(">modules.ac.tmp");
my $modules_mk = new BuildAux::XFile(">modules.mk.tmp");

print $modules_ac <<EOF;
## Generated by $me.
## Do not edit by hand.

EOF

print $modules_mk <<EOF;
## Generated by $me.
## Do not edit by hand.

\$(srcdir)/modules-bootstrap.stamp: \$(boostrap_modules_deps)
	baux=\$\$(cd \$(top_srcdir)/build-aux && pwd);     \\
	  cd \$(top_srcdir)/$prefix &&                  \\
	  \$\$baux/bin/bootstrap-modules --prefix '$prefix'
	echo "\$\$(date): \$?" >>\$@

EXTRA_DIST +=                                   \\
  \$(srcdir)/modules-bootstrap.stamp            \\
  \$(srcdir)/modules.ac                         \\
  \$(srcdir)/modules.mk

\$(srcdir)/modules.ac: \$(srcdir)/modules-bootstrap.stamp
\$(srcdir)/modules.mk: \$(srcdir)/modules-bootstrap.stamp

# Automake uses the name \$(top_srcdir) to qualify configure.ac.  The
# other targets are qualified with \$(srcdir).
\$(top_srcdir)/configure.ac: \$(srcdir)/modules.ac
EOF


# Look for module.ac files.
my @acfile = split ("\n", `find -L . -name module.ac | sed -e 's,^\./,,'`);
verbose 2, "acfiles: ", @acfile;
for my $acfile (sort per_module_name @acfile)
{
  my $moduledir = dirname $acfile;
  my $mkfile = "$moduledir/module.mk";
  my $module_name = module_name($acfile);
  my $module_identifier = module_identifier($acfile);
  (my $modulenormdir = $moduledir) =~ s{[/\-]}{_}g;

  # Check if this is a full or a skeleton module.ac.
  print $modules_mk <<EOF;

## Module $module_name.
EXTRA_DIST += $acfile
EOF
  # FIXME: make it more Perl.
  if (`grep -w URBI_MODULE $acfile` ne '')
  {
    verbose 3, "Appending $acfile";
    print $modules_ac <<EOF;

## Module $module_name.
m4_include([$prefix$acfile])
EOF
    depends "\$(srcdir)/$acfile";
  }
  else
  {
    urbi_module_ac($acfile);
    print $modules_mk "EXTRA_DIST += $acfile.auto\n";
    depends "\$(srcdir)/$acfile";
    print $modules_ac <<EOF;

## Module $module_name.
m4_include([$prefix$acfile.auto])
EOF
    depends "\$(srcdir)/$acfile.auto";
    file_update_file "$acfile.auto";
  }

  # Generate module.mk if it is not there.
  # Dependence on included files is handled by Automake.
  if (-f "$mkfile")
  {
    verbose 3, "Appending $mkfile";
    print $modules_mk "include $mkfile\n";
  }
  else
  {
    verbose 3, "Generating and appending $mkfile.auto";
    my @ext = qw(cc cpp hh c hxx);
    my $req = join (' -or ', map { "-name '*.$_'" } @ext);
    my $modulesources = qx(find -L "$moduledir" $req);
    chomp $modulesources;
    $modulesources =~ s{^(.*)$}
                       {sprintf "  %-40s\\", $1 }gem;
    $modulesources =~ s{\\\s*\Z}{}gs;

    $_ = <<EOF;
## Generated by $me.
## Do not edit by hand.

if BUILD_$module_identifier
module_LTLIBRARIES += $moduledir/$module_name.la

${modulenormdir}_${module_identifier}_la_SOURCES = \\
$modulesources

${modulenormdir}_${module_identifier}_la_CPPFLAGS = \\
  \$(AM_CPPFLAGS)       \\
  \$(${module_identifier}_CPPFLAGS) \\
  \$(URBI_SDK_CPPFLAGS)

${modulenormdir}_${module_identifier}_la_LDFLAGS = \\
  -module                          \\
  -avoid-version	           \\
  \$(${module_identifier}_LDFLAGS) \\
  \$(AM_LDFLAGS) \$(URBI_SDK_LDFLAGS)

${modulenormdir}_${module_identifier}_la_LIBADD = \\
  \$(AM_LIBADD) \\
  \$(${module_identifier}_LIBS) \\
  \$(URBI_SDK_LIBS)

if WIN32

${modulenormdir}_${module_identifier}_la_LDFLAGS += \\
  \$(LIBUOBJECT_REMOTE_LDFLAGS) \\
  -no-undefined

${modulenormdir}_${module_identifier}_la_LIBADD += \\
  \$(LIBUOBJECT_REMOTE_LIBS)

endif WIN32

endif BUILD_$module_identifier
EOF

    # Obfuscate from Emacs.
    $_ .= '
## Local ' . 'Variables:
## mode: Makefile
## End:
';

    file_update ("$mkfile.auto", "$_");
    print $modules_mk "include $mkfile.auto\n";
  }
}

print $modules_mk
  ("\n",
   "boostrap_modules_deps = \\\n  ",
   join ("\t\\\n  ",
         "\$(top_srcdir)/build-aux/bin/bootstrap-modules",
         sort @dependency),
   "\n");

file_update_file ("modules.ac");
file_update_file ("modules.mk");



### Setup "Gostai" style for perl-mode and cperl-mode.
## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: -2
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: -2
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
