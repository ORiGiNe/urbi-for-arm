#!/usr/bin/env python

import sys
import ast, tools

if len (sys.argv) != 2:
  tools.error("Usage: .. SRCDIR")
srcdir = sys.argv[1]

loader = ast.Loader ()
nodes, ast_params = loader.load (sys.stdin)

arr = nodes.values ()
arr.sort (lambda x, y: cmp (x.name, y.name))

## Abstract syntax tree C++ forward declarations ------------------------------
all_hh = file ("all.hh.tmp", "w")
print >>all_hh, tools.banner(ast_params,
                             "ast/all.hh",
			     """Include all the exported headers.""") + """
# include <ast/fwd.hh>
"""

for node in arr:
  print >>all_hh, '# include <ast/' + node.hh() + '>'

print >>all_hh, """

#endif // !AST_ALL_HH"""

all_hh.close ()
tools.lazy_install (srcdir, "all.hh");

## If demanded, all.cc includes all the foo.hcc for each Foo class.
all_cc = file ("all.cc.tmp", "w")
print >>all_cc, tools.banner(ast_params,
                             "ast/all.cc",
			     """All the AST class implementations.""") + """
"""

for node in arr:
  print >>all_cc, '#include <ast/' + node.cc() + '>'

all_cc.close ()
tools.lazy_install (srcdir, "all.cc");
